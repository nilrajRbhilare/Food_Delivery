{"file_contents":{"FoodDelivery/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"FoodDelivery/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"FoodDelivery/replit.md":{"content":"# FoodHub - Food Delivery Application\n\n## Overview\n\nFoodHub is a modern food delivery web application built as a frontend-focused React prototype. The application allows users to browse restaurants, search for food items, manage a shopping cart, and simulate the checkout process. It features a responsive design with support for light/dark themes, location selection with map integration, and a comprehensive filtering system for food discovery.\n\nThis is currently a **frontend-only prototype** with mock data and simulated interactions. The backend infrastructure is minimal, with a basic Express server setup that's ready for future API integration.\n\n## Recent Changes\n\n**October 16, 2025** - Fixed Critical Loading & Routing Issues:\n- ✅ **Resolved skeleton loader bug** - Home page now correctly displays 19 menu items from DataContext\n  - Root cause: DataContext initialization timing issue (loaded after Home component's useEffect timer completed)\n  - Initial solution attempted: Changed loading state from timer-based to data-based (`loading = menuItems.length === 0`)\n  - **Final robust solution**: Implemented `isInitialized` flag pattern in DataContext\n    - Added `isInitialized` boolean state to track when data loading is complete\n    - Set to `true` after both `initializeData()` and `loadData()` complete\n    - Home component now uses `loading = !isInitialized` instead of checking menuItems.length\n    - **Key benefit**: Properly distinguishes \"loading\" state from \"loaded but empty\" state\n    - Prevents skeleton loaders from showing forever when menu is legitimately empty\n    - Works correctly in all scenarios: initial load, localStorage updates, cross-tab sync\n- ✅ **Verified routing system integrity**:\n  - Wouter routing working correctly with regex patterns for exact matching\n  - Home route uses `/^\\/$/` pattern to match only \"/\" exactly\n  - Admin route properly protected with authentication guard (redirects non-admin users to home)\n  - All routes tested: `/` (home), `/admin`, `/cart`, `/track-order`, `/payment`, `/profile`\n- ✅ **Enhanced DataContext initialization**:\n  - Added data existence verification before loading from localStorage\n  - Ensures menuItems array is populated before components consume it\n  - Prevents race conditions between context initialization and component mounting\n  - Storage event listeners trigger loadData which sets isInitialized for cross-tab updates\n\n**October 15, 2025** - Enhanced Admin Panel & Restaurant Integration:\n- ✅ Updated admin registration to capture restaurant details:\n  - Restaurant Name field (required for admin accounts)\n  - Auto-generated unique Restaurant ID (REST-timestamp format)\n  - Restaurant Location field (editable in admin panel)\n- ✅ Implemented restaurant-order linkage system:\n  - Orders now include restaurantId for proper routing\n  - Round-robin distribution ensures fair order allocation across restaurants\n  - Each admin only sees orders for their specific restaurant\n  - Multi-admin support with isolated order management\n- ✅ Enhanced Menu Management with image support:\n  - Added imageUrl field to menu items\n  - Image URL input in create/edit dialogs\n  - Better visual representation for menu products\n- ✅ Verified Offers Management has complete validity date system:\n  - Start Date and End Date fields fully functional\n  - Date pickers for offer scheduling\n  - Automatic offer duration management\n\n**October 15, 2025** - Complete localStorage User Management System:\n- ✅ Implemented comprehensive user management with localStorage persistence\n- ✅ User records include: username, email, password, phone, address, and personal order history\n- ✅ Enhanced registration with username field and duplicate validation (email & username)\n- ✅ Login validates credentials against stored user records (email + password match)\n- ✅ Auto-login on page refresh - session restoration from localStorage\n- ✅ Per-user order tracking - each user has isolated order history in their user record\n- ✅ Payment page saves orders via AuthContext.addOrder() to logged-in user's orders array\n- ✅ Track Order page displays only current user's orders (no global order list)\n- ✅ Logout clears cart and UI state while preserving all user data in localStorage\n- ✅ Complete data isolation: users can only see and manage their own orders\n\n**October 14, 2025** - Authentication & Real Order Tracking:\n- ✅ Added authentication check to Cart page - login required before checkout\n- ✅ Integrated AuthModal to appear when unauthenticated users attempt to order\n- ✅ Implemented localStorage-based order persistence (replaces mock data)\n- ✅ Orders automatically saved with unique IDs, items, totals, delivery info, and status\n- ✅ Track Order page now displays real orders from localStorage with empty state handling\n- ✅ Complete flow working: Cart → Login Check → Payment → Save Order → Track Order\n\n**October 14, 2025** - Order Management System Implementation:\n- ✅ Added Track Order page with order status tracking (Preparing, On the Way, Delivered)\n- ✅ Created comprehensive Cart page with full order management\n- ✅ Implemented Payment page with multiple payment methods (COD, UPI, Banking)\n- ✅ Added coupon functionality (SAVE10 for ₹50 off, FOOD50 for ₹100 off)\n- ✅ Created order success popup with navigation options\n- ✅ Implemented proper state management across cart, payment, and order tracking\n- ✅ Fixed total consistency between Cart and Payment pages\n\n**October 14, 2025** - Initial feature implementations:\n- ✅ Real-time search functionality across all food items and categories\n- ✅ Interactive Leaflet map integration for location selection\n- ✅ Offer application system with cart discount calculations\n- ✅ Tax calculation (5%), delivery fee logic (₹40)\n- ✅ Comments section in food detail modal for order instructions\n- ✅ Dark mode toggle with localStorage persistence\n\nAll features are frontend-only with localStorage persistence for orders, no database required.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server for fast hot module replacement\n- **Wouter** for lightweight client-side routing\n- **TanStack Query (React Query)** for async state management and data fetching (ready for future backend integration)\n\n**UI Component Strategy**\n- **Shadcn/ui** component library built on Radix UI primitives for accessible, customizable components\n- **Tailwind CSS** for utility-first styling with custom design tokens\n- **Framer Motion** for smooth animations and transitions\n- Component structure follows the \"New York\" style variant from Shadcn with custom theming\n\n**State Management Pattern**\n- Local component state using React hooks (`useState`, `useEffect`)\n- Cart state managed at the App.tsx router level and passed to pages\n- Applied offers state shared across Home, Cart, and Payment pages\n- No global state management library (Redux/Zustand) - keeps the architecture simple for the prototype phase\n\n**Design System**\n- Custom color palette defined in `index.css` with CSS variables for theming\n- Support for light/dark modes with system preference detection\n- Reference-based design inspired by Swiggy, Zomato, and Uber Eats\n- Responsive breakpoints: mobile-first approach with sm/md/lg/xl breakpoints\n\n### Backend Architecture\n\n**Server Framework**\n- **Express.js** server with TypeScript\n- Middleware setup for JSON parsing and request logging\n- Error handling middleware configured\n- Development mode uses Vite middleware for HMR\n\n**Storage Layer (Prepared but Not Active)**\n- **In-memory storage** abstraction (`MemStorage` class) implementing `IStorage` interface\n- Ready for database integration - interface defines CRUD operations\n- User schema defined but not currently utilized\n\n**API Structure**\n- Routes configured to use `/api` prefix\n- Currently no active endpoints - backend is scaffolded for future implementation\n- Storage interface ready to be consumed by route handlers\n\n### Data Layer\n\n**Database Schema (Defined but Not Connected)**\n- **Drizzle ORM** configured for PostgreSQL\n- Schema defined in `shared/schema.ts` with users table\n- Neon Database serverless driver configured\n- Migration setup ready with `drizzle-kit`\n- **Note**: Database is defined but not currently provisioned or used\n\n**Mock Data Strategy**\n- Static food items, offers, and location data in `client/src/lib/mockData.ts`\n- Organized by categories: Chinese, Indian, Pizza, Desserts, Burgers, Healthy, Gourmet\n- Includes metadata: pricing, ratings, vegetarian flags, offers, descriptions\n- Image assets stored in `attached_assets/stock_images/`\n\n### Key Features Implementation\n\n**Location Selection**\n- Leaflet.js integration for interactive map selection\n- Manual address input with suggestion dropdown\n- Saved addresses (Home, Work) with icon indicators\n- Real-time coordinate display and address updates\n\n**Search & Discovery**\n- Real-time search filtering across all food items and restaurants\n- Search suggestions with live preview\n- Filter system: vegetarian toggle, price range, ratings, offers, proximity\n- Sort options: popularity, delivery time, rating, price\n\n**Cart Management**\n- Add/remove items with quantity controls\n- Automatic subtotal calculation\n- Tax calculation (5% rate)\n- Delivery fee logic (₹40, waived with free delivery offers)\n- Offer application system with discount calculation\n- Cart dropdown for quick view with navigation to full Cart page\n- Full Cart page with detailed order summary\n\n**Order & Payment Flow**\n- **Authentication Gate**: Cart page checks if user is logged in before allowing checkout\n- **Login/Register Modal**: Appears automatically when unauthenticated users click \"Order\"\n- **Payment Processing**: Multiple payment methods (Cash on Delivery, UPI, Banking)\n- **Coupon System**: Apply discount codes (SAVE10 for ₹50 off, FOOD50 for ₹100 off)\n- **Order Persistence**: Orders saved to localStorage with:\n  - Unique order ID (ORD + timestamp)\n  - Item details with quantities\n  - Total amount (includes delivery charges and discounts)\n  - Restaurant name, delivery date/time estimate\n  - Payment method and order status\n- **Order Tracking**: Track Order page reads from localStorage (no mock data)\n  - Current order status visualization (Preparing → On the Way → Delivered)\n  - Complete order history with all past orders\n  - Empty state when no orders exist\n- **Order Success Flow**: Popup with \"Order More\" and \"Track Order\" navigation\n- **Cart Management**: Automatic cart clearing after successful payment\n\n**Modal System**\n- Authentication modal with Sign In/Sign Up tabs (UI only, no backend)\n- Offers modal displaying available deals with apply functionality\n- Cart dropdown with quick view and navigation to full cart\n- Food detail modal with order comments\n- Order success modal with navigation options\n- All modals use Framer Motion for smooth entrance/exit animations\n\n## External Dependencies\n\n### UI & Animation Libraries\n- **@radix-ui/* components**: Accessible, unstyled UI primitives (20+ components)\n- **framer-motion**: Animation library for smooth transitions\n- **lucide-react**: Icon library for consistent iconography\n- **class-variance-authority & clsx**: Utility for managing conditional CSS classes\n- **tailwindcss**: Utility-first CSS framework with PostCSS\n\n### Map Integration\n- **leaflet**: Interactive maps for location selection\n- **react-leaflet**: React bindings for Leaflet\n- Map tiles from OpenStreetMap CDN\n\n### Backend Dependencies (Prepared)\n- **express**: Web server framework\n- **drizzle-orm & drizzle-zod**: ORM and schema validation\n- **@neondatabase/serverless**: Serverless PostgreSQL driver\n- **connect-pg-simple**: PostgreSQL session store (ready for session management)\n\n### Development Tools\n- **@vitejs/plugin-react**: Vite plugin for React Fast Refresh\n- **@replit/vite-plugin-***: Replit-specific development tools (error overlay, cartographer, dev banner)\n- **TypeScript**: Type safety across the entire codebase\n- **wouter**: Minimalist routing library\n\n### Form & Data Management\n- **react-hook-form**: Performant form handling (ready for future forms)\n- **@hookform/resolvers**: Validation resolver for react-hook-form\n- **zod**: Schema validation library\n- **@tanstack/react-query**: Server state management (configured for future API integration)\n\n### Fonts\n- **Google Fonts**: Inter, Plus Jakarta Sans, Architects Daughter, DM Sans, Fira Code, Geist Mono\n- Loaded via CDN in `client/index.html`","size_bytes":12702},"FoodDelivery/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"FoodDelivery/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"FoodDelivery/client/src/components/admin/OffersSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, Tag } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Offer {\n  id: string;\n  title: string;\n  discountPercentage: number;\n  startDate: string;\n  endDate: string;\n  applicableTo: \"all\" | \"specific\";\n  eligibleItems?: string[];\n  active: boolean;\n}\n\nconst OFFERS_KEY = 'foodhub_admin_offers';\n\nexport function OffersSection() {\n  const { toast } = useToast();\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingOffer, setEditingOffer] = useState<Offer | null>(null);\n  \n  const [title, setTitle] = useState(\"\");\n  const [discountPercentage, setDiscountPercentage] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [applicableTo, setApplicableTo] = useState<\"all\" | \"specific\">(\"all\");\n  const [eligibleItems, setEligibleItems] = useState(\"\");\n\n  useEffect(() => {\n    loadOffers();\n  }, []);\n\n  const loadOffers = () => {\n    const saved = localStorage.getItem(OFFERS_KEY);\n    if (saved) {\n      setOffers(JSON.parse(saved));\n    }\n  };\n\n  const saveOffers = (items: Offer[]) => {\n    localStorage.setItem(OFFERS_KEY, JSON.stringify(items));\n    setOffers(items);\n  };\n\n  const handleAdd = () => {\n    if (!title || !discountPercentage || !startDate || !endDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newOffer: Offer = {\n      id: Date.now().toString(),\n      title,\n      discountPercentage: parseFloat(discountPercentage),\n      startDate,\n      endDate,\n      applicableTo,\n      eligibleItems: applicableTo === \"specific\" ? eligibleItems.split(\",\").map(i => i.trim()) : undefined,\n      active: true,\n    };\n\n    saveOffers([...offers, newOffer]);\n    resetForm();\n    setIsAddOpen(false);\n    \n    toast({\n      title: \"Offer Created\",\n      description: `${title} has been created successfully`,\n    });\n  };\n\n  const handleEdit = () => {\n    if (!editingOffer || !title || !discountPercentage || !startDate || !endDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updated = offers.map(offer =>\n      offer.id === editingOffer.id\n        ? { \n            ...offer, \n            title, \n            discountPercentage: parseFloat(discountPercentage), \n            startDate, \n            endDate, \n            applicableTo,\n            eligibleItems: applicableTo === \"specific\" ? eligibleItems.split(\",\").map(i => i.trim()) : undefined,\n          }\n        : offer\n    );\n\n    saveOffers(updated);\n    resetForm();\n    setEditingOffer(null);\n    \n    toast({\n      title: \"Offer Updated\",\n      description: `${title} has been updated`,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    const filtered = offers.filter(offer => offer.id !== id);\n    saveOffers(filtered);\n    \n    toast({\n      title: \"Offer Deleted\",\n      description: \"Offer has been removed\",\n    });\n  };\n\n  const toggleActive = (id: string) => {\n    const updated = offers.map(offer =>\n      offer.id === id ? { ...offer, active: !offer.active } : offer\n    );\n    saveOffers(updated);\n    \n    const offer = offers.find(o => o.id === id);\n    toast({\n      title: offer?.active ? \"Offer Deactivated\" : \"Offer Activated\",\n      description: offer?.active ? \"Offer has been deactivated\" : \"Offer is now active\",\n    });\n  };\n\n  const resetForm = () => {\n    setTitle(\"\");\n    setDiscountPercentage(\"\");\n    setStartDate(\"\");\n    setEndDate(\"\");\n    setApplicableTo(\"all\");\n    setEligibleItems(\"\");\n  };\n\n  const openEdit = (offer: Offer) => {\n    setEditingOffer(offer);\n    setTitle(offer.title);\n    setDiscountPercentage(offer.discountPercentage.toString());\n    setStartDate(offer.startDate);\n    setEndDate(offer.endDate);\n    setApplicableTo(offer.applicableTo);\n    setEligibleItems(offer.eligibleItems?.join(\", \") || \"\");\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-offers-title\">Offers Management</h1>\n        <Dialog open={isAddOpen} onOpenChange={setIsAddOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm} data-testid=\"button-add-offer\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Offer\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-add-offer\">\n            <DialogHeader>\n              <DialogTitle>Create New Offer</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"offer-title\">Offer Title</Label>\n                <Input\n                  id=\"offer-title\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  placeholder=\"e.g., Summer Special\"\n                  data-testid=\"input-offer-title\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"discount\">Discount Percentage (%)</Label>\n                <Input\n                  id=\"discount\"\n                  type=\"number\"\n                  value={discountPercentage}\n                  onChange={(e) => setDiscountPercentage(e.target.value)}\n                  placeholder=\"e.g., 20\"\n                  data-testid=\"input-discount\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"start-date\">Start Date</Label>\n                  <Input\n                    id=\"start-date\"\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"end-date\">End Date</Label>\n                  <Input\n                    id=\"end-date\"\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"applicable-to\">Apply To</Label>\n                <Select value={applicableTo} onValueChange={(val) => setApplicableTo(val as \"all\" | \"specific\")}>\n                  <SelectTrigger data-testid=\"select-applicable\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Entire Menu</SelectItem>\n                    <SelectItem value=\"specific\">Specific Items/Categories</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {applicableTo === \"specific\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"eligible-items\">Eligible Items (comma-separated)</Label>\n                  <Input\n                    id=\"eligible-items\"\n                    value={eligibleItems}\n                    onChange={(e) => setEligibleItems(e.target.value)}\n                    placeholder=\"e.g., Pizza, Pasta, Desserts\"\n                    data-testid=\"input-eligible-items\"\n                  />\n                </div>\n              )}\n              <Button onClick={handleAdd} className=\"w-full\" data-testid=\"button-submit-offer\">\n                Create Offer\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Dialog open={editingOffer !== null} onOpenChange={(open) => !open && setEditingOffer(null)}>\n        <DialogContent data-testid=\"dialog-edit-offer\">\n          <DialogHeader>\n            <DialogTitle>Edit Offer</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-offer-title\">Offer Title</Label>\n              <Input\n                id=\"edit-offer-title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                data-testid=\"input-edit-title\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-discount\">Discount Percentage (%)</Label>\n              <Input\n                id=\"edit-discount\"\n                type=\"number\"\n                value={discountPercentage}\n                onChange={(e) => setDiscountPercentage(e.target.value)}\n                data-testid=\"input-edit-discount\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-start-date\">Start Date</Label>\n                <Input\n                  id=\"edit-start-date\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  data-testid=\"input-edit-start-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-end-date\">End Date</Label>\n                <Input\n                  id=\"edit-end-date\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  data-testid=\"input-edit-end-date\"\n                />\n              </div>\n            </div>\n            <Button onClick={handleEdit} className=\"w-full\" data-testid=\"button-submit-edit-offer\">\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <div className=\"grid gap-4\">\n        {offers.map(offer => (\n          <Card key={offer.id} data-testid={`card-offer-${offer.id}`}>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Tag className=\"h-5 w-5 text-primary\" />\n                <span data-testid={`text-offer-title-${offer.id}`}>{offer.title}</span>\n              </CardTitle>\n              <div className=\"flex gap-2\">\n                <Badge variant={offer.active ? \"default\" : \"secondary\"} data-testid={`badge-active-${offer.id}`}>\n                  {offer.active ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Discount</p>\n                  <p className=\"font-medium\" data-testid={`text-discount-${offer.id}`}>{offer.discountPercentage}%</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Applicable To</p>\n                  <p className=\"font-medium\" data-testid={`text-applicable-${offer.id}`}>{offer.applicableTo === \"all\" ? \"Entire Menu\" : \"Specific Items\"}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Start Date</p>\n                  <p className=\"font-medium\" data-testid={`text-start-${offer.id}`}>{offer.startDate}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">End Date</p>\n                  <p className=\"font-medium\" data-testid={`text-end-${offer.id}`}>{offer.endDate}</p>\n                </div>\n              </div>\n              {offer.eligibleItems && offer.eligibleItems.length > 0 && (\n                <div className=\"text-sm\">\n                  <p className=\"text-muted-foreground mb-1\">Eligible Items:</p>\n                  <p className=\"font-medium\" data-testid={`text-eligible-${offer.id}`}>{offer.eligibleItems.join(\", \")}</p>\n                </div>\n              )}\n              <div className=\"flex gap-2 pt-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => toggleActive(offer.id)} data-testid={`button-toggle-active-${offer.id}`}>\n                  {offer.active ? \"Deactivate\" : \"Activate\"}\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => openEdit(offer)} data-testid={`button-edit-offer-${offer.id}`}>\n                  <Edit className=\"mr-1 h-3 w-3\" />\n                  Edit\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => handleDelete(offer.id)} data-testid={`button-delete-offer-${offer.id}`}>\n                  <Trash2 className=\"mr-1 h-3 w-3\" />\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        \n        {offers.length === 0 && (\n          <p className=\"text-center text-muted-foreground py-12\" data-testid=\"text-no-offers\">\n            No offers yet. Click \"Create Offer\" to get started.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13814},"FoodDelivery/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"FoodDelivery/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"FoodDelivery/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"FoodDelivery/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"FoodDelivery/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"FoodDelivery/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"FoodDelivery/design_guidelines.md":{"content":"# Food Delivery App - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from leading food delivery platforms like Swiggy, Zomato, and Uber Eats with modern UI principles\n\n## Core Design Elements\n\n### A. Color Palette\n**Light Mode:**\n- Primary: 255 84% 50% (Vibrant coral/red for food branding)\n- Secondary: 142 71% 45% (Fresh green for healthy/veg options)\n- Accent: 45 93% 58% (Warm orange for offers/promotions)\n- Neutral backgrounds: 0 0% 98%, 0 0% 100%\n- Text: 220 13% 18% (dark slate)\n\n**Dark Mode:**\n- Primary: 255 84% 55%\n- Secondary: 142 71% 50%\n- Background: 220 13% 18%, 220 13% 12%\n- Text: 0 0% 98%\n\n### B. Typography\n**Font Family:** \n- Primary: 'Inter' or 'Plus Jakarta Sans' (Google Fonts)\n- Headings: Semi-bold to Bold (600-700)\n- Body: Regular to Medium (400-500)\n\n**Scale:**\n- Hero/Category Headers: text-2xl to text-4xl\n- Card Titles: text-lg\n- Body/Descriptions: text-sm to text-base\n- Captions/Tags: text-xs\n\n### C. Layout System\n**Spacing Units:** Consistent use of 2, 4, 6, 8, 12, 16, 20 Tailwind units\n- Component padding: p-4, p-6\n- Section spacing: py-8, py-12, py-16\n- Grid gaps: gap-4, gap-6\n- Card spacing: p-4 to p-6\n\n**Container Structure:**\n- Max width: max-w-7xl\n- Horizontal padding: px-4 md:px-6 lg:px-8\n- Responsive breakpoints: sm, md, lg, xl\n\n### D. Component Library\n\n**Navbar:**\n- Sticky positioning with backdrop blur\n- Height: h-16 to h-20\n- Shadow: subtle shadow-md\n- Location dropdown: rounded-xl modal with smooth slide-down\n- Search bar: rounded-full with focus ring\n- Cart: slide-in panel from right (w-96)\n\n**Filter Bar:**\n- Horizontal scroll on mobile\n- Toggle buttons: rounded-full with active state (filled bg)\n- Icons: 20x20 size from Lucide React\n- Active filters: primary color fill with white text\n- Inactive: border with hover lift effect\n\n**Food Cards:**\n- Aspect ratio: 4:3 for food images\n- Border radius: rounded-2xl\n- Shadow: shadow-sm with hover:shadow-xl transition\n- Image: object-cover with slight zoom on hover\n- Add to Cart button: rounded-lg with scale animation\n- Offer badge: absolute top-right, rounded-full\n\n**Category Sections:**\n- Horizontal scroll: overflow-x-auto with hidden scrollbar\n- Card width: w-72 to w-80\n- Gap between cards: gap-4\n- Navigation arrows: absolute positioned on hover\n\n**Modals:**\n- Backdrop: bg-black/50 with backdrop-blur\n- Content: max-w-2xl, rounded-3xl\n- Animation: fade + scale from Framer Motion\n- Close button: absolute top-right\n\n**Sign In/Sign Up:**\n- Tabbed interface with underline indicator\n- Input fields: rounded-xl with focus ring\n- Submit button: w-full, rounded-xl\n\n### E. Visual Effects\n\n**Animations (Framer Motion):**\n- Page transitions: fade + slide\n- Card hover: lift (translateY -2px) + shadow increase\n- Button clicks: scale(0.95)\n- Cart add: slide-in from bottom\n- Modal: fade + scale from 0.95\n- Loading: shimmer gradient animation\n\n**Hover States:**\n- Cards: transform, shadow, and slight scale\n- Buttons: background darken + slight lift\n- Links: underline animation\n- Images: subtle zoom (scale: 1.05)\n\n**Gradients:**\n- Hero/Offer cards: linear-gradient with vibrant colors\n- Category headers: subtle overlay gradients\n- Buttons: optional gradient on primary actions\n\n### F. Responsive Behavior\n\n**Desktop (lg+):**\n- Multi-column grids (3-4 columns)\n- Horizontal category carousels\n- Expanded navbar with all elements visible\n\n**Tablet (md):**\n- 2-column grids\n- Compact navbar with condensed search\n- Touch-friendly button sizes (min h-12)\n\n**Mobile (base):**\n- Single column stacks\n- Bottom sticky navbar option\n- Drawer-style menus\n- Larger touch targets (min 44px)\n\n### G. Images\n**Hero Section:** No traditional hero - immediately show food categories\n**Food Cards:** High-quality food photography (800x600px minimum)\n**Restaurant Logos:** Circular avatars (100x100px)\n**Offer Banners:** Landscape images with text overlay (1200x400px)\n**Category Icons:** Illustrated icons or emoji (64x64px)\n\n**Image Treatment:**\n- Border radius: rounded-xl to rounded-2xl\n- Object fit: cover\n- Loading: shimmer placeholder\n- Lazy loading for performance\n\n### H. Accessibility\n- Focus visible rings on all interactive elements\n- ARIA labels for icon-only buttons\n- Sufficient color contrast (WCAG AA)\n- Keyboard navigation support\n- Semantic HTML structure\n\n### I. Loading States\n- Shimmer effect: animated gradient overlay\n- Skeleton screens for cards (bg-gray-200 animate-pulse)\n- Spinner for actions (lucide loader with spin animation)\n- Progressive image loading with blur-up\n\n### J. Interactive Elements\n- Back to top: fixed bottom-right, rounded-full, primary color\n- Cart badge: absolute positioned, rounded-full, count animation\n- Filter chips: removable with X icon, slide-out animation\n- Rating stars: filled/half-filled gold stars\n- Comment input: expandable textarea with character count","size_bytes":4853},"FoodDelivery/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"FoodDelivery/client/src/pages/Payment.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, CreditCard, Smartphone, Banknote, Tag, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface PaymentProps {\n  items?: Array<{ id: string; name: string; price: number; quantity: number }>;\n  onClearCart?: () => void;\n}\n\nconst validCoupons = {\n  SAVE10: 50,\n  FOOD50: 100,\n};\n\nexport default function Payment({ items = [], onClearCart }: PaymentProps) {\n  const [location, setLocation] = useLocation();\n  const { addOrder } = useAuth();\n  const [paymentMethod, setPaymentMethod] = useState<\"cod\" | \"upi\" | \"banking\">(\"cod\");\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [appliedCoupon, setAppliedCoupon] = useState<{ code: string; discount: number } | null>(null);\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n\n  const searchParams = new URLSearchParams(location.split(\"?\")[1] || \"\");\n  const urlSubtotal = parseFloat(searchParams.get(\"subtotal\") || \"0\");\n  const urlTax = parseFloat(searchParams.get(\"tax\") || \"0\");\n  const urlDeliveryFee = parseFloat(searchParams.get(\"delivery\") || \"0\");\n  const urlOfferDiscount = parseFloat(searchParams.get(\"discount\") || \"0\");\n  const urlCartTotal = parseFloat(searchParams.get(\"total\") || \"0\");\n\n  const TAX_RATE = 0.05;\n  const DELIVERY_FEE = 40;\n\n  const itemsSubtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  \n  const subtotal = urlSubtotal > 0 ? urlSubtotal : itemsSubtotal;\n  const tax = urlTax > 0 ? urlTax : itemsSubtotal * TAX_RATE;\n  const deliveryFee = urlDeliveryFee >= 0 ? urlDeliveryFee : DELIVERY_FEE;\n  const offerDiscount = urlOfferDiscount || 0;\n\n  const orderTotal = urlCartTotal > 0 ? urlCartTotal : (subtotal + tax + deliveryFee - offerDiscount);\n  const couponDiscount = appliedCoupon ? appliedCoupon.discount : 0;\n  const finalTotal = Math.max(orderTotal - couponDiscount, 0);\n\n  const handleApplyCoupon = () => {\n    const upperCode = couponCode.toUpperCase() as keyof typeof validCoupons;\n    if (validCoupons[upperCode]) {\n      setAppliedCoupon({ code: couponCode.toUpperCase(), discount: validCoupons[upperCode] });\n    } else {\n      setAppliedCoupon({ code: couponCode, discount: 0 });\n    }\n  };\n\n  const handleRemoveCoupon = () => {\n    setAppliedCoupon(null);\n    setCouponCode(\"\");\n  };\n\n  const handlePayment = () => {\n    // Generate unique order ID\n    const orderId = `ORD${Date.now().toString().slice(-6)}`;\n    \n    // Get current date and time\n    const now = new Date();\n    const deliveryDate = new Intl.DateTimeFormat('en-US', { \n      month: 'short', \n      day: 'numeric', \n      year: 'numeric' \n    }).format(now);\n    const deliveryTime = new Intl.DateTimeFormat('en-US', { \n      hour: 'numeric', \n      minute: '2-digit', \n      hour12: true \n    }).format(new Date(now.getTime() + 30 * 60000)); // Estimated delivery in 30 mins\n    \n    // Get restaurant ID from admin profiles\n    // For now, cycle through available restaurants to distribute orders fairly\n    // In a real app, user would select which restaurant they're ordering from\n    const adminProfiles = JSON.parse(localStorage.getItem('foodhub_admin_profiles') || '{}');\n    const adminEmails = Object.keys(adminProfiles);\n    \n    let restaurantId: string | undefined;\n    let restaurantName = \"FoodHub\";\n    \n    if (adminEmails.length > 0) {\n      // Get last order index for round-robin distribution\n      const lastOrderIndex = parseInt(localStorage.getItem('last_restaurant_order_index') || '0');\n      const nextIndex = lastOrderIndex % adminEmails.length;\n      const selectedEmail = adminEmails[nextIndex];\n      \n      restaurantId = adminProfiles[selectedEmail].restaurantId;\n      restaurantName = adminProfiles[selectedEmail].restaurantName;\n      \n      // Update index for next order\n      localStorage.setItem('last_restaurant_order_index', (nextIndex + 1).toString());\n    }\n    \n    // Create order object\n    const order = {\n      id: orderId,\n      items: items.map(item => `${item.name} (x${item.quantity})`),\n      total: finalTotal,\n      restaurant: restaurantName,\n      restaurantId: restaurantId,\n      status: \"New\" as const,\n      deliveryDate,\n      deliveryTime,\n      paymentMethod,\n      orderDate: now.toISOString(),\n    };\n    \n    // Save order to logged-in user's record\n    addOrder(order);\n    \n    setShowSuccessPopup(true);\n    if (onClearCart) {\n      onClearCart();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/cart\")}\n          className=\"mb-6 gap-2\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Cart\n        </Button>\n\n        <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"page-title\">Payment</h1>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            {items.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Items</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {items.map((item) => (\n                    <div key={item.id} className=\"flex justify-between\" data-testid={`payment-item-${item.id}`}>\n                      <div>\n                        <p className=\"font-medium\">{item.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                      </div>\n                      <p className=\"font-semibold\">₹{item.price * item.quantity}</p>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Tag className=\"h-5 w-5\" />\n                  Apply Coupon\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {!appliedCoupon ? (\n                  <>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Enter coupon code\"\n                        value={couponCode}\n                        onChange={(e) => setCouponCode(e.target.value.toUpperCase())}\n                        data-testid=\"input-coupon\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleApplyCoupon}\n                        disabled={!couponCode}\n                        data-testid=\"button-apply-coupon\"\n                      >\n                        Apply\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Valid coupons: SAVE10 (₹50 off), FOOD50 (₹100 off)\n                    </p>\n                  </>\n                ) : (\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-950 rounded-lg\" data-testid=\"applied-coupon\">\n                    <div>\n                      <p className=\"font-medium text-green-700 dark:text-green-300\">\n                        {appliedCoupon.code} applied\n                      </p>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">\n                        Discount: ₹{appliedCoupon.discount}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleRemoveCoupon}\n                      data-testid=\"button-remove-coupon\"\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Method</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <RadioGroup value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as any)}>\n                  <div className=\"flex items-center space-x-3 p-3 rounded-lg hover-elevate\" data-testid=\"payment-cod\">\n                    <RadioGroupItem value=\"cod\" id=\"cod\" />\n                    <Label htmlFor=\"cod\" className=\"flex items-center gap-2 cursor-pointer flex-1\">\n                      <Banknote className=\"h-5 w-5\" />\n                      <div>\n                        <p className=\"font-medium\">Cash on Delivery</p>\n                        <p className=\"text-xs text-muted-foreground\">Pay when you receive</p>\n                      </div>\n                    </Label>\n                  </div>\n                  <Separator className=\"my-2\" />\n                  <div className=\"flex items-center space-x-3 p-3 rounded-lg hover-elevate\" data-testid=\"payment-upi\">\n                    <RadioGroupItem value=\"upi\" id=\"upi\" />\n                    <Label htmlFor=\"upi\" className=\"flex items-center gap-2 cursor-pointer flex-1\">\n                      <Smartphone className=\"h-5 w-5\" />\n                      <div>\n                        <p className=\"font-medium\">UPI</p>\n                        <p className=\"text-xs text-muted-foreground\">Google Pay, PhonePe, Paytm</p>\n                      </div>\n                    </Label>\n                  </div>\n                  <Separator className=\"my-2\" />\n                  <div className=\"flex items-center space-x-3 p-3 rounded-lg hover-elevate\" data-testid=\"payment-banking\">\n                    <RadioGroupItem value=\"banking\" id=\"banking\" />\n                    <Label htmlFor=\"banking\" className=\"flex items-center gap-2 cursor-pointer flex-1\">\n                      <CreditCard className=\"h-5 w-5\" />\n                      <div>\n                        <p className=\"font-medium\">Debit/Credit Card or NetBanking</p>\n                        <p className=\"text-xs text-muted-foreground\">Visa, MasterCard, AmEx, etc.</p>\n                      </div>\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-6\">\n              <CardContent className=\"p-6 space-y-4\">\n                <h3 className=\"font-bold text-lg\">Payment Summary</h3>\n                <Separator />\n                <div className=\"space-y-2\">\n                  {subtotal > 0 && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Subtotal</span>\n                      <span>₹{subtotal.toFixed(2)}</span>\n                    </div>\n                  )}\n                  {tax > 0 && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Tax</span>\n                      <span>₹{tax.toFixed(2)}</span>\n                    </div>\n                  )}\n                  {deliveryFee > 0 && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Delivery Fee</span>\n                      <span>₹{deliveryFee.toFixed(2)}</span>\n                    </div>\n                  )}\n                  {offerDiscount > 0 && (\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>Offer Discount</span>\n                      <span>-₹{offerDiscount.toFixed(2)}</span>\n                    </div>\n                  )}\n                  {subtotal === 0 && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Order Total</span>\n                      <span data-testid=\"payment-subtotal\">₹{orderTotal.toFixed(2)}</span>\n                    </div>\n                  )}\n                  {couponDiscount > 0 && (\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>Coupon Discount</span>\n                      <span data-testid=\"payment-discount\">-₹{couponDiscount.toFixed(2)}</span>\n                    </div>\n                  )}\n                </div>\n                <Separator />\n                <div className=\"flex justify-between items-center font-bold text-xl\">\n                  <span>Total</span>\n                  <span data-testid=\"payment-total\">₹{finalTotal.toFixed(2)}</span>\n                </div>\n                <Button\n                  className=\"w-full\"\n                  size=\"lg\"\n                  onClick={handlePayment}\n                  data-testid=\"button-pay\"\n                >\n                  Pay ₹{finalTotal.toFixed(2)}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <AnimatePresence>\n        {showSuccessPopup && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\n              onClick={() => setShowSuccessPopup(false)}\n              data-testid=\"success-backdrop\"\n            />\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9, y: 20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.9, y: 20 }}\n              className=\"relative bg-background rounded-3xl shadow-2xl w-full max-w-md p-8 text-center\"\n              data-testid=\"success-popup\"\n            >\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n                className=\"mb-6\"\n              >\n                <div className=\"w-24 h-24 bg-green-100 dark:bg-green-950 rounded-full flex items-center justify-center mx-auto\">\n                  <CheckCircle2 className=\"w-12 h-12 text-green-600 dark:text-green-400\" />\n                </div>\n              </motion.div>\n\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"success-title\">Order placed successfully!</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Your order has been placed. Thank you for ordering with FoodHub!\n              </p>\n\n              <div className=\"space-y-3\">\n                <Button \n                  className=\"w-full\" \n                  onClick={() => {\n                    setShowSuccessPopup(false);\n                    setLocation(\"/\");\n                  }}\n                  data-testid=\"button-order-more\"\n                >\n                  Order More\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setShowSuccessPopup(false);\n                    setLocation(\"/track-order\");\n                  }}\n                  data-testid=\"button-track-order-success\"\n                >\n                  Track Order\n                </Button>\n              </div>\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":15935},"FoodDelivery/client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { User, Mail, Phone, MapPin, Edit2, Check, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navbar } from \"@/components/Navbar\";\nimport { useLocation } from \"wouter\";\n\nexport default function Profile() {\n  const { user, updateUser, logout } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    name: user?.name || \"\",\n    email: user?.email || \"\",\n    phone: user?.phone || \"\",\n    address: user?.address || \"\",\n  });\n\n  const handleSave = () => {\n    updateUser(formData);\n    setIsEditing(false);\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile has been successfully updated.\",\n    });\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      phone: user?.phone || \"\",\n      address: user?.address || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar\n        cartItems={[]}\n        onRemoveFromCart={() => {}}\n        onUpdateQuantity={() => {}}\n        searchQuery=\"\"\n        onSearchChange={() => {}}\n        onApplyOffer={() => {}}\n        appliedOffer={null}\n      />\n\n      <main className=\"max-w-4xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl md:text-3xl font-bold\" data-testid=\"text-profile-title\">My Profile</h1>\n          {!isEditing ? (\n            <Button\n              onClick={() => setIsEditing(true)}\n              className=\"gap-2\"\n              data-testid=\"button-edit-profile\"\n            >\n              <Edit2 className=\"h-4 w-4\" />\n              Edit Profile\n            </Button>\n          ) : (\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleSave}\n                className=\"gap-2\"\n                data-testid=\"button-save-profile\"\n              >\n                <Check className=\"h-4 w-4\" />\n                Save\n              </Button>\n              <Button\n                onClick={handleCancel}\n                variant=\"outline\"\n                className=\"gap-2\"\n                data-testid=\"button-cancel-edit\"\n              >\n                <X className=\"h-4 w-4\" />\n                Cancel\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\" data-testid=\"avatar-profile\">\n                <AvatarImage src={user?.avatar} />\n                <AvatarFallback className=\"text-2xl\">\n                  {user?.name ? getInitials(user.name) : \"U\"}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <CardTitle className=\"text-2xl\" data-testid=\"text-profile-name\">\n                  {user?.name || \"User\"}\n                </CardTitle>\n                <p className=\"text-muted-foreground\" data-testid=\"text-profile-email\">\n                  {user?.email}\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Full Name\n                </Label>\n                {isEditing ? (\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"Enter your full name\"\n                    data-testid=\"input-edit-name\"\n                  />\n                ) : (\n                  <p className=\"text-base\" data-testid=\"text-display-name\">{user?.name}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  Email Address\n                </Label>\n                {isEditing ? (\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    placeholder=\"Enter your email\"\n                    data-testid=\"input-edit-email\"\n                  />\n                ) : (\n                  <p className=\"text-base\" data-testid=\"text-display-email\">{user?.email}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"flex items-center gap-2\">\n                  <Phone className=\"h-4 w-4\" />\n                  Phone Number\n                </Label>\n                {isEditing ? (\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                    placeholder=\"Enter your phone number\"\n                    data-testid=\"input-edit-phone\"\n                  />\n                ) : (\n                  <p className=\"text-base\" data-testid=\"text-display-phone\">{user?.phone}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\" className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  Address\n                </Label>\n                {isEditing ? (\n                  <Input\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                    placeholder=\"Enter your address\"\n                    data-testid=\"input-edit-address\"\n                  />\n                ) : (\n                  <p className=\"text-base\" data-testid=\"text-display-address\">{user?.address}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"border-t pt-6\">\n              <Button\n                onClick={handleLogout}\n                variant=\"destructive\"\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7379},"FoodDelivery/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"FoodDelivery/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"FoodDelivery/client/src/components/examples/Navbar.tsx":{"content":"import { Navbar } from \"../Navbar\";\n\nexport default function NavbarExample() {\n  const cartItems = [\n    { id: \"1\", name: \"Margherita Pizza\", price: 299, quantity: 2 },\n    { id: \"2\", name: \"Butter Chicken\", price: 320, quantity: 1 },\n  ];\n\n  return (\n    <Navbar\n      cartItems={cartItems}\n      onRemoveFromCart={(id) => console.log(\"Remove:\", id)}\n      onUpdateQuantity={(id, qty) => console.log(\"Update:\", id, qty)}\n    />\n  );\n}\n","size_bytes":436},"FoodDelivery/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"FoodDelivery/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"FoodDelivery/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"FoodDelivery/client/src/components/FilterBar.tsx":{"content":"import { Leaf, DollarSign, MapPin, Star, Tag, ArrowUpDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport interface FilterState {\n  vegOnly: boolean;\n  priceRange: string;\n  nearby: boolean;\n  rating: string;\n  hasOffers: boolean;\n  sortBy: string;\n}\n\ninterface FilterBarProps {\n  filters: FilterState;\n  onFilterChange: (filters: FilterState) => void;\n}\n\nexport function FilterBar({ filters, onFilterChange }: FilterBarProps) {\n  const toggleFilter = (key: keyof FilterState) => {\n    if (typeof filters[key] === \"boolean\") {\n      onFilterChange({ ...filters, [key]: !filters[key] });\n    }\n  };\n\n  const activeFilterCount = [\n    filters.vegOnly,\n    filters.priceRange !== \"all\",\n    filters.nearby,\n    filters.rating !== \"all\",\n    filters.hasOffers,\n    filters.sortBy !== \"default\",\n  ].filter(Boolean).length;\n\n  return (\n    <div className=\"bg-background border-b sticky top-16 md:top-20 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-4\">\n        <div className=\"flex items-center gap-2 overflow-x-auto pb-2 scrollbar-hide\">\n          <Button\n            variant={filters.vegOnly ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => toggleFilter(\"vegOnly\")}\n            className=\"gap-2 flex-shrink-0 rounded-full\"\n            data-testid=\"filter-veg\"\n          >\n            <Leaf className=\"h-4 w-4\" />\n            Veg Only\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant={filters.priceRange !== \"all\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"gap-2 flex-shrink-0 rounded-full\"\n                data-testid=\"filter-price\"\n              >\n                <DollarSign className=\"h-4 w-4\" />\n                Price Range\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, priceRange: \"all\" })} data-testid=\"price-all\">\n                All Prices\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, priceRange: \"100\" })} data-testid=\"price-100\">\n                Under ₹100\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, priceRange: \"200\" })} data-testid=\"price-200\">\n                Under ₹200\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, priceRange: \"500\" })} data-testid=\"price-500\">\n                Under ₹500\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button\n            variant={filters.nearby ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => toggleFilter(\"nearby\")}\n            className=\"gap-2 flex-shrink-0 rounded-full\"\n            data-testid=\"filter-nearby\"\n          >\n            <MapPin className=\"h-4 w-4\" />\n            Nearby\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant={filters.rating !== \"all\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"gap-2 flex-shrink-0 rounded-full\"\n                data-testid=\"filter-rating\"\n              >\n                <Star className=\"h-4 w-4\" />\n                Rating\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, rating: \"all\" })} data-testid=\"rating-all\">\n                All Ratings\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, rating: \"4+\" })} data-testid=\"rating-4\">\n                4.0+ ⭐\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, rating: \"4.5+\" })} data-testid=\"rating-4.5\">\n                4.5+ ⭐\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button\n            variant={filters.hasOffers ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => toggleFilter(\"hasOffers\")}\n            className=\"gap-2 flex-shrink-0 rounded-full\"\n            data-testid=\"filter-offers\"\n          >\n            <Tag className=\"h-4 w-4\" />\n            Offers\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant={filters.sortBy !== \"default\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"gap-2 flex-shrink-0 rounded-full\"\n                data-testid=\"filter-sort\"\n              >\n                <ArrowUpDown className=\"h-4 w-4\" />\n                Sort\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, sortBy: \"default\" })} data-testid=\"sort-default\">\n                Default\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, sortBy: \"priceLow\" })} data-testid=\"sort-low\">\n                Price: Low to High\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onFilterChange({ ...filters, sortBy: \"priceHigh\" })} data-testid=\"sort-high\">\n                Price: High to Low\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {activeFilterCount > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2\" data-testid=\"active-filter-count\">\n              {activeFilterCount} active\n            </Badge>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6026},"FoodDelivery/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"FoodDelivery/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"FoodDelivery/client/src/components/OffersModal.tsx":{"content":"import { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { offers } from \"@/lib/mockData\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface OffersModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onApplyOffer: (offer: { id: string; title: string; description: string; discountValue: number }) => void;\n}\n\nexport function OffersModal({ isOpen, onClose, onApplyOffer }: OffersModalProps) {\n  const handleApplyOffer = (offer: typeof offers[0]) => {\n    const discountValue = offer.title.includes(\"50%\") ? 50 : \n                         offer.title.includes(\"30%\") ? 30 :\n                         offer.title.includes(\"Free Delivery\") ? 0 : 0;\n    onApplyOffer({ \n      id: offer.id, \n      title: offer.title, \n      description: offer.description,\n      discountValue \n    });\n    onClose();\n  };\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n          data-testid=\"offers-backdrop\"\n        />\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto\"\n          data-testid=\"offers-modal\"\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4 z-10\"\n            data-testid=\"button-close-offers\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n\n          <div className=\"sticky top-0 bg-background border-b p-6\">\n            <h2 className=\"text-2xl font-bold\">Available Offers</h2>\n          </div>\n\n          <div className=\"p-6 grid gap-4 md:grid-cols-2\">\n            {offers.map((offer) => (\n              <Card key={offer.id} className=\"overflow-hidden hover-elevate\" data-testid={`offer-${offer.id}`}>\n                <div className=\"flex gap-4 p-4\">\n                  <img\n                    src={offer.image}\n                    alt={offer.title}\n                    className=\"w-24 h-24 object-cover rounded-lg\"\n                  />\n                  <div className=\"flex-1\">\n                    <Badge className=\"mb-2 bg-accent text-accent-foreground\">Offer</Badge>\n                    <h3 className=\"font-semibold mb-1\">{offer.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{offer.description}</p>\n                    <Button \n                      size=\"sm\" \n                      className=\"mt-3\" \n                      onClick={() => handleApplyOffer(offer)}\n                      data-testid={`button-apply-${offer.id}`}\n                    >\n                      Apply Offer\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n}\n","size_bytes":3317},"FoodDelivery/client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" data-testid=\"icon-moon\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" data-testid=\"icon-sun\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1216},"FoodDelivery/client/src/components/admin/AdminNavbar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Edit, LogOut, Store } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function AdminNavbar() {\n  const { adminProfile, updateAdminProfile, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  \n  const [restaurantName, setRestaurantName] = useState(adminProfile?.restaurantName || \"\");\n  const [branches, setBranches] = useState(adminProfile?.branches || \"\");\n  const [location, setLocationValue] = useState(adminProfile?.location || \"\");\n  const [contact, setContact] = useState(adminProfile?.contact || \"\");\n  const [managerName, setManagerName] = useState(adminProfile?.managerName || \"\");\n\n  const handleSave = () => {\n    updateAdminProfile({\n      restaurantName,\n      branches,\n      location,\n      contact,\n      managerName\n    });\n    \n    toast({\n      title: \"Profile Updated\",\n      description: \"Restaurant details have been updated successfully.\",\n    });\n    \n    setIsEditOpen(false);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"border-b bg-card\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center gap-4\" data-testid=\"admin-details\">\n          <Store className=\"h-6 w-6 text-primary\" />\n          <div>\n            <h3 className=\"font-semibold\" data-testid=\"text-restaurant-name\">{adminProfile?.restaurantName || \"My Restaurant\"}</h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-restaurant-id\">ID: {adminProfile?.restaurantId || \"N/A\"}</p>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            <p data-testid=\"text-branches\">Branches: {adminProfile?.branches || \"1\"}</p>\n            <p data-testid=\"text-location\">Location: {adminProfile?.location || \"Not Set\"}</p>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            <p data-testid=\"text-contact\">Contact: {adminProfile?.contact || \"Not Set\"}</p>\n            <p data-testid=\"text-manager\">Manager: {adminProfile?.managerName || \"Not Set\"}</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-profile\">\n                <Edit className=\"mr-2 h-4 w-4\" />\n                Edit Info\n              </Button>\n            </DialogTrigger>\n            <DialogContent data-testid=\"dialog-edit-profile\">\n              <DialogHeader>\n                <DialogTitle>Edit Restaurant Details</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"restaurant-name\">Restaurant Name</Label>\n                  <Input\n                    id=\"restaurant-name\"\n                    value={restaurantName}\n                    onChange={(e) => setRestaurantName(e.target.value)}\n                    data-testid=\"input-restaurant-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"branches\">Number of Branches</Label>\n                  <Input\n                    id=\"branches\"\n                    value={branches}\n                    onChange={(e) => setBranches(e.target.value)}\n                    data-testid=\"input-branches\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    value={location}\n                    onChange={(e) => setLocationValue(e.target.value)}\n                    data-testid=\"input-location\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contact\">Contact</Label>\n                  <Input\n                    id=\"contact\"\n                    value={contact}\n                    onChange={(e) => setContact(e.target.value)}\n                    data-testid=\"input-contact\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"manager\">Manager Name</Label>\n                  <Input\n                    id=\"manager\"\n                    value={managerName}\n                    onChange={(e) => setManagerName(e.target.value)}\n                    data-testid=\"input-manager-name\"\n                  />\n                </div>\n                <Button onClick={handleSave} className=\"w-full\" data-testid=\"button-save-profile\">\n                  Save Changes\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <Button variant=\"outline\" size=\"sm\" onClick={handleLogout} data-testid=\"button-logout\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5514},"FoodDelivery/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"FoodDelivery/client/src/contexts/DataContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { foodItems as mockFoodItems } from \"@/lib/mockData\";\n\nexport interface Restaurant {\n  id: string;\n  name: string;\n  location: string;\n  adminEmail: string;\n  rating: number;\n  image?: string;\n  createdAt: string;\n}\n\nexport interface MenuItem {\n  id: string;\n  name: string;\n  restaurantId: string;\n  restaurantName: string;\n  rating: number;\n  price: number;\n  image: string;\n  category: string;\n  isVeg: boolean;\n  offer?: string;\n  description: string;\n  available: boolean;\n}\n\ninterface DataContextType {\n  restaurants: Restaurant[];\n  menuItems: MenuItem[];\n  isInitialized: boolean;\n  addRestaurant: (restaurant: Restaurant) => void;\n  updateRestaurant: (id: string, data: Partial<Restaurant>) => void;\n  addMenuItem: (item: MenuItem) => void;\n  updateMenuItem: (id: string, data: Partial<MenuItem>) => void;\n  deleteMenuItem: (id: string) => void;\n  getRestaurantMenuItems: (restaurantId: string) => MenuItem[];\n  refreshData: () => void;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nconst RESTAURANTS_KEY = 'foodhub_restaurants';\nconst MENU_ITEMS_KEY = 'foodhub_menu_items';\nconst INITIALIZED_KEY = 'foodhub_data_initialized';\n\nexport function DataProvider({ children }: { children: ReactNode }) {\n  const [restaurants, setRestaurants] = useState<Restaurant[]>([]);\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    initializeData();\n    \n    // Listen for localStorage changes from other tabs/windows\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === RESTAURANTS_KEY || e.key === MENU_ITEMS_KEY) {\n        loadData();\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  const initializeData = () => {\n    const isInitialized = localStorage.getItem(INITIALIZED_KEY);\n    const existingRestaurants = localStorage.getItem(RESTAURANTS_KEY);\n    const existingMenuItems = localStorage.getItem(MENU_ITEMS_KEY);\n    \n    // Only load existing data if all pieces are present\n    if (isInitialized && existingRestaurants && existingMenuItems) {\n      loadData();\n      return;\n    }\n    \n    // Create fresh mock data\n    const mockRestaurants: Restaurant[] = [];\n    const restaurantMap = new Map<string, Restaurant>();\n    \n    // Extract unique restaurants from mock food items\n    mockFoodItems.forEach(item => {\n      if (!restaurantMap.has(item.restaurant)) {\n        const restaurant: Restaurant = {\n          id: `MOCK-${Date.now()}-${restaurantMap.size}`,\n          name: item.restaurant,\n          location: \"Mock Location\",\n          adminEmail: \"mock@foodhub.com\",\n          rating: item.rating,\n          image: item.image,\n          createdAt: new Date().toISOString()\n        };\n        restaurantMap.set(item.restaurant, restaurant);\n        mockRestaurants.push(restaurant);\n      }\n    });\n\n    // Convert mock food items to menu items with restaurant IDs\n    const mockMenuItems: MenuItem[] = mockFoodItems.map(item => {\n      const restaurant = restaurantMap.get(item.restaurant)!;\n      return {\n        id: `MOCK-${item.id}`,\n        name: item.name,\n        restaurantId: restaurant.id,\n        restaurantName: restaurant.name,\n        rating: item.rating,\n        price: item.price,\n        image: item.image,\n        category: item.category,\n        isVeg: item.isVeg,\n        offer: item.offer,\n        description: item.description,\n        available: true\n      };\n    });\n\n    localStorage.setItem(RESTAURANTS_KEY, JSON.stringify(mockRestaurants));\n    localStorage.setItem(MENU_ITEMS_KEY, JSON.stringify(mockMenuItems));\n    localStorage.setItem(INITIALIZED_KEY, 'true');\n    \n    setRestaurants(mockRestaurants);\n    setMenuItems(mockMenuItems);\n    setIsInitialized(true);\n  };\n\n  const loadData = () => {\n    const restaurantsJson = localStorage.getItem(RESTAURANTS_KEY);\n    const menuItemsJson = localStorage.getItem(MENU_ITEMS_KEY);\n    \n    if (restaurantsJson) {\n      setRestaurants(JSON.parse(restaurantsJson));\n    }\n    \n    if (menuItemsJson) {\n      setMenuItems(JSON.parse(menuItemsJson));\n    }\n    \n    setIsInitialized(true);\n  };\n\n  const addRestaurant = (restaurant: Restaurant) => {\n    const updated = [...restaurants, restaurant];\n    setRestaurants(updated);\n    localStorage.setItem(RESTAURANTS_KEY, JSON.stringify(updated));\n  };\n\n  const updateRestaurant = (id: string, data: Partial<Restaurant>) => {\n    const updated = restaurants.map(r => r.id === id ? { ...r, ...data } : r);\n    setRestaurants(updated);\n    localStorage.setItem(RESTAURANTS_KEY, JSON.stringify(updated));\n  };\n\n  const addMenuItem = (item: MenuItem) => {\n    const updated = [...menuItems, item];\n    setMenuItems(updated);\n    localStorage.setItem(MENU_ITEMS_KEY, JSON.stringify(updated));\n  };\n\n  const updateMenuItem = (id: string, data: Partial<MenuItem>) => {\n    const updated = menuItems.map(item => item.id === id ? { ...item, ...data } : item);\n    setMenuItems(updated);\n    localStorage.setItem(MENU_ITEMS_KEY, JSON.stringify(updated));\n  };\n\n  const deleteMenuItem = (id: string) => {\n    const updated = menuItems.filter(item => item.id !== id);\n    setMenuItems(updated);\n    localStorage.setItem(MENU_ITEMS_KEY, JSON.stringify(updated));\n  };\n\n  const getRestaurantMenuItems = (restaurantId: string) => {\n    return menuItems.filter(item => item.restaurantId === restaurantId);\n  };\n\n  const refreshData = () => {\n    loadData();\n  };\n\n  return (\n    <DataContext.Provider value={{\n      restaurants,\n      menuItems,\n      isInitialized,\n      addRestaurant,\n      updateRestaurant,\n      addMenuItem,\n      updateMenuItem,\n      deleteMenuItem,\n      getRestaurantMenuItems,\n      refreshData\n    }}>\n      {children}\n    </DataContext.Provider>\n  );\n}\n\nexport function useData() {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error(\"useData must be used within a DataProvider\");\n  }\n  return context;\n}\n","size_bytes":6160},"FoodDelivery/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"FoodDelivery/client/src/pages/TrackOrder.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { ArrowLeft, Package, Clock, Truck, CheckCircle2, ShoppingBag, XCircle, HelpCircle, ChefHat } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface Order {\n  id: string;\n  items: string[];\n  total: number;\n  restaurant: string;\n  status: \"New\" | \"Preparing\" | \"On the Way\" | \"Delivered\" | \"Denied\";\n  deliveryDate: string;\n  deliveryTime: string;\n  paymentMethod?: string;\n  orderDate?: string;\n}\n\nconst statusConfig = {\n  New: { icon: HelpCircle, color: \"text-gray-500\", bgColor: \"bg-gray-100 dark:bg-gray-950\", message: \"Waiting for restaurant confirmation\" },\n  Preparing: { icon: ChefHat, color: \"text-orange-500\", bgColor: \"bg-orange-100 dark:bg-orange-950\", message: \"Order accepted, being prepared\" },\n  \"On the Way\": { icon: Truck, color: \"text-blue-500\", bgColor: \"bg-blue-100 dark:bg-blue-950\", message: \"Order ready for delivery\" },\n  Delivered: { icon: CheckCircle2, color: \"text-green-500\", bgColor: \"bg-green-100 dark:bg-green-950\", message: \"Order delivered successfully\" },\n  Denied: { icon: XCircle, color: \"text-red-500\", bgColor: \"bg-red-100 dark:bg-red-950\", message: \"Order was denied by restaurant\" },\n};\n\nexport default function TrackOrder() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n\n  const orders = user?.orders || [];\n  const currentOrder = orders.find(o => o.status !== \"Delivered\");\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-5xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"mb-6 gap-2\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </Button>\n\n          <div className=\"flex flex-col items-center justify-center py-20\">\n            <ShoppingBag className=\"h-24 w-24 text-muted-foreground mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"login-required-title\">Please log in</h2>\n            <p className=\"text-muted-foreground mb-6\">Log in to track your orders</p>\n            <Button onClick={() => setLocation(\"/\")} data-testid=\"button-go-home\">\n              Go to Home\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-5xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/\")}\n          className=\"mb-6 gap-2\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Home\n        </Button>\n\n        <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"page-title\">Track Your Orders</h1>\n\n        {orders.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-20\">\n            <ShoppingBag className=\"h-24 w-24 text-muted-foreground mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"no-orders-title\">No orders yet</h2>\n            <p className=\"text-muted-foreground mb-6\">Place your first order to track it here</p>\n            <Button onClick={() => setLocation(\"/\")} data-testid=\"button-browse-menu\">\n              Browse Menu\n            </Button>\n          </div>\n        ) : (\n          <>\n            {currentOrder && (\n              <Card className=\"mb-8\" data-testid=\"current-order\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Package className=\"h-5 w-5\" />\n                      Current Order - {currentOrder.id}\n                    </CardTitle>\n                    <Badge variant=\"outline\" className={statusConfig[currentOrder.status]?.bgColor || \"bg-gray-100 dark:bg-gray-950\"}>\n                      {currentOrder.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Status Message */}\n                  <div className=\"p-4 rounded-lg bg-muted\">\n                    <div className=\"flex items-center gap-3\">\n                      {(() => {\n                        const StatusIcon = statusConfig[currentOrder.status]?.icon || HelpCircle;\n                        const color = statusConfig[currentOrder.status]?.color || \"text-gray-500\";\n                        return <StatusIcon className={`h-6 w-6 ${color}`} />;\n                      })()}\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Current Status</p>\n                        <p className=\"font-semibold\" data-testid=\"status-message\">\n                          {statusConfig[currentOrder.status]?.message || \"Order status unknown\"}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col md:flex-row gap-6\">\n                    <div className=\"flex-1 space-y-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Restaurant</p>\n                        <p className=\"font-medium\" data-testid=\"current-restaurant\">{currentOrder.restaurant}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Items</p>\n                        <ul className=\"space-y-1\">\n                          {currentOrder.items.map((item, idx) => (\n                            <li key={idx} className=\"text-sm\" data-testid={`current-item-${idx}`}>• {item}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Delivery Date & Time</p>\n                        <p className=\"font-medium\" data-testid=\"current-delivery\">{currentOrder.deliveryDate} at {currentOrder.deliveryTime}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                        <p className=\"text-xl font-bold\" data-testid=\"current-total\">₹{currentOrder.total}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Status Timeline - Only show if not New or Denied */}\n                  {currentOrder.status !== \"Denied\" && currentOrder.status !== \"New\" && (\n                    <div className=\"space-y-4\">\n                      <p className=\"font-medium\">Order Progress</p>\n                      <div className=\"flex items-center justify-between gap-4\">\n                        {([\"Preparing\", \"On the Way\", \"Delivered\"] as const).map((status) => {\n                          const config = statusConfig[status];\n                          if (!config) return null;\n                          \n                          const StatusIcon = config.icon;\n                          const isActive = currentOrder.status === status;\n                          const statusOrder = { \"Preparing\": 1, \"On the Way\": 2, \"Delivered\": 3 };\n                          const currentStatusOrder = statusOrder[currentOrder.status as keyof typeof statusOrder] || 0;\n                          const thisStatusOrder = statusOrder[status];\n                          const isPast = currentStatusOrder > thisStatusOrder;\n                          \n                          return (\n                            <div key={status} className=\"flex-1 flex items-center gap-2\">\n                              <div className={`flex items-center justify-center w-10 h-10 rounded-full ${\n                                isActive || isPast ? config.bgColor : \"bg-muted\"\n                              }`}>\n                                <StatusIcon className={`h-5 w-5 ${\n                                  isActive || isPast ? config.color : \"text-muted-foreground\"\n                                }`} />\n                              </div>\n                              <div className=\"flex-1\">\n                                <p className={`text-sm font-medium ${\n                                  isActive || isPast ? \"\" : \"text-muted-foreground\"\n                                }`} data-testid={`status-${status.toLowerCase().replace(\" \", \"-\")}`}>\n                                  {status}\n                                </p>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            <div>\n              <h2 className=\"text-2xl font-bold mb-4\">Order History</h2>\n              <div className=\"space-y-4\">\n                {orders.map((order) => (\n                  <Card key={order.id} data-testid={`order-${order.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between flex-wrap gap-2\">\n                        <CardTitle className=\"text-lg\">{order.id}</CardTitle>\n                        <Badge variant=\"outline\" className={statusConfig[order.status]?.bgColor || \"bg-gray-100 dark:bg-gray-950\"}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"mb-4 p-3 rounded-lg bg-muted/50 text-sm\">\n                        {statusConfig[order.status]?.message || \"Order status unknown\"}\n                      </div>\n                      <div className=\"grid md:grid-cols-4 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Restaurant</p>\n                          <p className=\"font-medium\" data-testid={`order-${order.id}-restaurant`}>{order.restaurant}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Items</p>\n                          <p className=\"text-sm\" data-testid={`order-${order.id}-items`}>{order.items.join(\", \")}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Delivery</p>\n                          <p className=\"text-sm\" data-testid={`order-${order.id}-delivery`}>{order.deliveryDate}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.deliveryTime}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total</p>\n                          <p className=\"font-bold\" data-testid={`order-${order.id}-total`}>₹{order.total}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11549},"FoodDelivery/client/src/components/examples/CategorySection.tsx":{"content":"import { CategorySection } from \"../CategorySection\";\nimport { foodItems } from \"@/lib/mockData\";\n\nexport default function CategorySectionExample() {\n  const chineseItems = foodItems.filter(item => item.category === \"Chinese\");\n  \n  return (\n    <CategorySection\n      title=\"Chinese\"\n      items={chineseItems}\n      onAddToCart={(item) => console.log(\"Add to cart:\", item)}\n      onItemClick={(item) => console.log(\"View details:\", item)}\n    />\n  );\n}\n","size_bytes":455},"FoodDelivery/client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { AdminNavbar } from \"@/components/admin/AdminNavbar\";\nimport { AdminSidebar } from \"@/components/admin/AdminSidebar\";\nimport { OrdersSection } from \"@/components/admin/OrdersSection\";\nimport { MenuSection } from \"@/components/admin/MenuSection\";\nimport { OffersSection } from \"@/components/admin/OffersSection\";\nimport { MetricsSection } from \"@/components/admin/MetricsSection\";\nimport { HelpSection } from \"@/components/admin/HelpSection\";\n\nexport default function Admin() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeSection, setActiveSection] = useState<\"orders\" | \"menu\" | \"offers\" | \"metrics\" | \"help\">(\"orders\");\n\n  useEffect(() => {\n    if (!isAuthenticated || user?.userType !== 'admin') {\n      setLocation('/');\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  if (!isAuthenticated || user?.userType !== 'admin') {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <AdminSidebar activeSection={activeSection} onSectionChange={setActiveSection} />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <AdminNavbar />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {activeSection === \"orders\" && <OrdersSection />}\n          {activeSection === \"menu\" && <MenuSection />}\n          {activeSection === \"offers\" && <OffersSection />}\n          {activeSection === \"metrics\" && <MetricsSection />}\n          {activeSection === \"help\" && <HelpSection />}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1714},"FoodDelivery/client/src/components/examples/FoodCard.tsx":{"content":"import { FoodCard } from \"../FoodCard\";\nimport { foodItems } from \"@/lib/mockData\";\n\nexport default function FoodCardExample() {\n  return (\n    <div className=\"p-4\">\n      <FoodCard\n        item={foodItems[0]}\n        onAddToCart={(item) => console.log(\"Add to cart:\", item)}\n        onClick={(item) => console.log(\"View details:\", item)}\n      />\n    </div>\n  );\n}\n","size_bytes":366},"FoodDelivery/client/src/components/admin/HelpSection.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { BookOpen, MessageSquare, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function HelpSection() {\n  const { toast } = useToast();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const handleSubmitFeedback = () => {\n    if (!name || !email || !message) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Feedback Submitted\",\n      description: \"Thank you for your feedback! We'll get back to you soon.\",\n    });\n\n    setName(\"\");\n    setEmail(\"\");\n    setMessage(\"\");\n  };\n\n  return (\n    <div>\n      <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"text-help-title\">Help & Support</h1>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card data-testid=\"card-guides\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Admin Guides\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              <AccordionItem value=\"item-1\" data-testid=\"accordion-menu\">\n                <AccordionTrigger>How to Add Menu Items</AccordionTrigger>\n                <AccordionContent>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    <li>Navigate to the \"Menu\" section from the sidebar</li>\n                    <li>Click the \"Add Item\" button in the top right</li>\n                    <li>Fill in the item name, price, category, and subcategory</li>\n                    <li>You can create custom categories by selecting \"Custom\"</li>\n                    <li>Click \"Add Item\" to save the new menu item</li>\n                    <li>You can edit or delete items anytime from the menu list</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-2\" data-testid=\"accordion-orders\">\n                <AccordionTrigger>How to Manage Orders</AccordionTrigger>\n                <AccordionContent>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    <li>Go to the \"Orders\" section to see all incoming orders</li>\n                    <li>New orders appear in the \"New\" tab - click \"Accept\" to start processing</li>\n                    <li>Once accepted, the order moves to \"Preparing\" status</li>\n                    <li>When food is ready, click \"Mark Ready\" to notify delivery</li>\n                    <li>After delivery, click \"Delivered\" to complete the order</li>\n                    <li>If an item is unavailable, mark it as \"Out of Stock\"</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-3\" data-testid=\"accordion-metrics\">\n                <AccordionTrigger>How to Track Sales Metrics</AccordionTrigger>\n                <AccordionContent>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    <li>Visit the \"Metrics\" section for business analytics</li>\n                    <li>Select a time range from the dropdown (Today, 7 days, 30 days, etc.)</li>\n                    <li>For specific dates, choose \"Custom Range\" and select start/end dates</li>\n                    <li>View total revenue, order count, and average order value</li>\n                    <li>Analyze revenue and order trends with interactive charts</li>\n                    <li>See top-selling items to optimize your menu</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-4\" data-testid=\"accordion-offers\">\n                <AccordionTrigger>How to Create Offers</AccordionTrigger>\n                <AccordionContent>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    <li>Navigate to the \"Offers\" section</li>\n                    <li>Click \"Create Offer\" to start a new promotional offer</li>\n                    <li>Enter offer title, discount percentage, and date range</li>\n                    <li>Choose to apply the offer to entire menu or specific items</li>\n                    <li>For specific items, enter comma-separated item names</li>\n                    <li>Activate/deactivate offers anytime without deleting them</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-5\" data-testid=\"accordion-profile\">\n                <AccordionTrigger>How to Update Restaurant Profile</AccordionTrigger>\n                <AccordionContent>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    <li>Click the \"Edit Info\" button in the top navigation bar</li>\n                    <li>Update restaurant name, branches, location, contact, or manager name</li>\n                    <li>Click \"Save Changes\" to update your profile</li>\n                    <li>Changes will be reflected immediately in the navbar</li>\n                    <li>This information helps customers identify your restaurant</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-feedback\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              Contact & Feedback\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"feedback-name\">Your Name</Label>\n                <Input\n                  id=\"feedback-name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  placeholder=\"Enter your name\"\n                  data-testid=\"input-feedback-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"feedback-email\">Your Email</Label>\n                <Input\n                  id=\"feedback-email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  data-testid=\"input-feedback-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"feedback-message\">Message</Label>\n                <Textarea\n                  id=\"feedback-message\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder=\"How can we help you?\"\n                  rows={5}\n                  data-testid=\"input-feedback-message\"\n                />\n              </div>\n              <Button onClick={handleSubmitFeedback} className=\"w-full\" data-testid=\"button-submit-feedback\">\n                <Send className=\"mr-2 h-4 w-4\" />\n                Submit Feedback\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7849},"FoodDelivery/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"FoodDelivery/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"FoodDelivery/client/src/pages/Cart.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Minus, Plus, X, ShoppingBag } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { AuthModal } from \"@/components/AuthModal\";\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  restaurant?: string;\n}\n\ninterface CartProps {\n  items: CartItem[];\n  onRemoveFromCart: (id: string) => void;\n  onUpdateQuantity: (id: string, quantity: number) => void;\n  appliedOffer?: { id: string; title: string; description: string; discountValue: number } | null;\n}\n\nexport default function Cart({ items, onRemoveFromCart, onUpdateQuantity, appliedOffer }: CartProps) {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n  const [showAuthModal, setShowAuthModal] = useState(false);\n\n  const TAX_RATE = 0.05;\n  const DELIVERY_FEE = 40;\n\n  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const tax = subtotal * TAX_RATE;\n  const deliveryFee = appliedOffer?.title.includes(\"Free Delivery\") ? 0 : DELIVERY_FEE;\n  const offerDiscount = appliedOffer?.discountValue \n    ? Math.min((subtotal * appliedOffer.discountValue) / 100, 100)\n    : 0;\n  const total = Math.max(subtotal + tax + deliveryFee - offerDiscount, 0);\n\n  const handleOrderClick = () => {\n    if (!isAuthenticated) {\n      setShowAuthModal(true);\n      return;\n    }\n    setLocation(`/payment?subtotal=${subtotal}&tax=${tax}&delivery=${deliveryFee}&discount=${offerDiscount}&total=${total}`);\n  };\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-5xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"mb-6 gap-2\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </Button>\n\n          <div className=\"flex flex-col items-center justify-center py-20\">\n            <ShoppingBag className=\"h-24 w-24 text-muted-foreground mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"empty-cart-title\">Your cart is empty</h2>\n            <p className=\"text-muted-foreground mb-6\">Add items to get started</p>\n            <Button onClick={() => setLocation(\"/\")} data-testid=\"button-browse-menu\">\n              Browse Menu\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-5xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/\")}\n          className=\"mb-6 gap-2\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Home\n        </Button>\n\n        <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"page-title\">Your Cart</h1>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-4\">\n            {items.map((item) => (\n              <Card key={item.id} data-testid={`cart-item-${item.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex gap-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold mb-1\" data-testid={`item-name-${item.id}`}>{item.name}</h3>\n                      {item.restaurant && (\n                        <p className=\"text-sm text-muted-foreground mb-2\">{item.restaurant}</p>\n                      )}\n                      <p className=\"font-bold\" data-testid={`item-price-${item.id}`}>₹{item.price}</p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8\"\n                          onClick={() => onUpdateQuantity(item.id, Math.max(0, item.quantity - 1))}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"w-8 text-center font-medium\" data-testid={`quantity-${item.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8\"\n                          onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => onRemoveFromCart(item.id)}\n                        data-testid={`button-remove-${item.id}`}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-6\">\n              <CardContent className=\"p-6 space-y-4\">\n                <h3 className=\"font-bold text-lg\">Order Summary</h3>\n                <Separator />\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Subtotal</span>\n                    <span data-testid=\"cart-subtotal\">₹{subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Tax (5%)</span>\n                    <span data-testid=\"cart-tax\">₹{tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Delivery Fee</span>\n                    <span data-testid=\"cart-delivery-fee\">₹{deliveryFee}</span>\n                  </div>\n                  {offerDiscount > 0 && (\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>Offer Discount</span>\n                      <span data-testid=\"cart-offer-discount\">-₹{offerDiscount.toFixed(2)}</span>\n                    </div>\n                  )}\n                </div>\n                <Separator />\n                <div className=\"flex justify-between items-center font-bold text-lg\">\n                  <span>Total</span>\n                  <span data-testid=\"cart-total\">₹{total.toFixed(2)}</span>\n                </div>\n                <Button\n                  className=\"w-full\"\n                  size=\"lg\"\n                  onClick={handleOrderClick}\n                  data-testid=\"button-order\"\n                >\n                  Order\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <AuthModal \n        isOpen={showAuthModal} \n        onClose={() => setShowAuthModal(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":7706},"FoodDelivery/client/src/components/LoadingSkeleton.tsx":{"content":"export function LoadingSkeleton() {\n  return (\n    <div className=\"space-y-8 py-8\">\n      {[1, 2, 3].map((section) => (\n        <div key={section} className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <div className=\"h-8 bg-muted rounded-lg w-48 mb-6 animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n          \n          <div className=\"flex gap-4 overflow-hidden\">\n            {[1, 2, 3, 4].map((card) => (\n              <div key={card} className=\"flex-shrink-0 w-72\">\n                <div className=\"bg-card rounded-2xl overflow-hidden\">\n                  <div className=\"aspect-[4/3] bg-muted animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n                  <div className=\"p-4 space-y-3\">\n                    <div className=\"h-5 bg-muted rounded animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n                    <div className=\"h-4 bg-muted rounded w-2/3 animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-4 bg-muted rounded w-16 animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n                      <div className=\"h-4 bg-muted rounded w-16 animate-shimmer bg-gradient-to-r from-muted via-muted-foreground/10 to-muted bg-[length:1000px_100%]\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1714},"FoodDelivery/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"FoodDelivery/client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Navbar } from \"@/components/Navbar\";\nimport { FilterBar, FilterState } from \"@/components/FilterBar\";\nimport { CategorySection } from \"@/components/CategorySection\";\nimport { FoodDetailModal } from \"@/components/FoodDetailModal\";\nimport { BackToTop } from \"@/components/BackToTop\";\nimport { LoadingSkeleton } from \"@/components/LoadingSkeleton\";\nimport { useData, MenuItem } from \"@/contexts/DataContext\";\nimport { type FoodItem } from \"@/lib/mockData\";\n\ninterface CartItem extends FoodItem {\n  quantity: number;\n}\n\ninterface HomeProps {\n  cartItems: Array<{ id: string; name: string; price: number; quantity: number; restaurant?: string }>;\n  setCartItems: React.Dispatch<React.SetStateAction<Array<{ id: string; name: string; price: number; quantity: number; restaurant?: string }>>>;\n  appliedOffer: { id: string; title: string; description: string; discountValue: number } | null;\n  setAppliedOffer: React.Dispatch<React.SetStateAction<{ id: string; title: string; description: string; discountValue: number } | null>>;\n}\n\nexport default function Home({ cartItems, setCartItems, appliedOffer, setAppliedOffer }: HomeProps) {\n  const { menuItems, isInitialized } = useData();\n  const [selectedFood, setSelectedFood] = useState<FoodItem | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState<FilterState>({\n    vegOnly: false,\n    priceRange: \"all\",\n    nearby: false,\n    rating: \"all\",\n    hasOffers: false,\n    sortBy: \"default\",\n  });\n\n  // Loading is true only when data hasn't been initialized yet\n  const loading = !isInitialized;\n\n  const handleAddToCart = (item: FoodItem) => {\n    setCartItems((prev) => {\n      const existing = prev.find((i) => i.id === item.id);\n      if (existing) {\n        return prev.map((i) =>\n          i.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\n        );\n      }\n      return [...prev, { ...item, quantity: 1, restaurant: item.restaurant }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: string) => {\n    setCartItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity === 0) {\n      handleRemoveFromCart(id);\n    } else {\n      setCartItems((prev) =>\n        prev.map((item) => (item.id === id ? { ...item, quantity } : item))\n      );\n    }\n  };\n\n  // Convert MenuItem to FoodItem format and filter available items only\n  const availableFoodItems: FoodItem[] = menuItems\n    .filter(item => item.available)\n    .map(item => ({\n      id: item.id,\n      name: item.name,\n      restaurant: item.restaurantName,\n      rating: item.rating,\n      price: item.price,\n      image: item.image,\n      category: item.category,\n      isVeg: item.isVeg,\n      offer: item.offer,\n      description: item.description\n    }));\n\n  // Filter and sort food items\n  const filteredItems = availableFoodItems.filter((item) => {\n    if (searchQuery && !item.name.toLowerCase().includes(searchQuery.toLowerCase()) && \n        !item.restaurant.toLowerCase().includes(searchQuery.toLowerCase()) &&\n        !item.category.toLowerCase().includes(searchQuery.toLowerCase())) {\n      return false;\n    }\n    if (filters.vegOnly && !item.isVeg) return false;\n    if (filters.priceRange !== \"all\" && item.price > parseInt(filters.priceRange)) return false;\n    if (filters.rating === \"4+\" && item.rating < 4) return false;\n    if (filters.rating === \"4.5+\" && item.rating < 4.5) return false;\n    if (filters.hasOffers && !item.offer) return false;\n    return true;\n  });\n\n  const sortedItems = [...filteredItems].sort((a, b) => {\n    if (filters.sortBy === \"priceLow\") return a.price - b.price;\n    if (filters.sortBy === \"priceHigh\") return b.price - a.price;\n    return 0;\n  });\n\n  const categories = [\n    { id: \"chinese\", name: \"Chinese\", items: sortedItems.filter(i => i.category === \"Chinese\") },\n    { id: \"indian\", name: \"Indian\", items: sortedItems.filter(i => i.category === \"Indian\") },\n    { id: \"pizza\", name: \"Pizza & Fast Food\", items: sortedItems.filter(i => i.category === \"Pizza\" || i.category === \"Fast Food\") },\n    { id: \"icecream\", name: \"Ice Creams\", items: sortedItems.filter(i => i.category === \"Ice Cream\") },\n    { id: \"brands\", name: \"Popular Brands\", items: sortedItems.filter(i => [\"McDonald's\", \"KFC\", \"Domino's\", \"Subway\", \"Pizza Hut\", \"Baskin Robbins\"].includes(i.restaurant)) },\n    { id: \"veg\", name: \"Only Veg\", items: sortedItems.filter(i => i.isVeg) },\n    { id: \"premium\", name: \"Premium Dining\", items: sortedItems.filter(i => i.category === \"Premium\") },\n  ];\n\n  const cartItemsForNav = cartItems.map(item => ({\n    id: item.id,\n    name: item.name,\n    price: item.price,\n    quantity: item.quantity,\n  }));\n\n  const handleClearCart = () => {\n    setCartItems([]);\n    setAppliedOffer(null);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Navbar\n          cartItems={[]}\n          onRemoveFromCart={handleRemoveFromCart}\n          onUpdateQuantity={handleUpdateQuantity}\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          onApplyOffer={setAppliedOffer}\n          appliedOffer={appliedOffer}\n          onClearCart={handleClearCart}\n        />\n        <FilterBar filters={filters} onFilterChange={setFilters} />\n        <LoadingSkeleton />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar\n        cartItems={cartItemsForNav}\n        onRemoveFromCart={handleRemoveFromCart}\n        onUpdateQuantity={handleUpdateQuantity}\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n        onApplyOffer={setAppliedOffer}\n        appliedOffer={appliedOffer}\n        onClearCart={handleClearCart}\n      />\n      \n      <FilterBar filters={filters} onFilterChange={setFilters} />\n\n      <main>\n        {categories.map((category) => (\n          category.items.length > 0 && (\n            <CategorySection\n              key={category.id}\n              title={category.name}\n              items={category.items}\n              onAddToCart={handleAddToCart}\n              onItemClick={setSelectedFood}\n            />\n          )\n        ))}\n\n        {categories.every(cat => cat.items.length === 0) && (\n          <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-20 text-center\">\n            <p className=\"text-xl text-muted-foreground\">No items match your filters</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Try adjusting your filters to see more options</p>\n          </div>\n        )}\n      </main>\n\n      <FoodDetailModal\n        item={selectedFood}\n        isOpen={!!selectedFood}\n        onClose={() => setSelectedFood(null)}\n        onAddToCart={handleAddToCart}\n      />\n\n      <BackToTop />\n    </div>\n  );\n}\n","size_bytes":6812},"FoodDelivery/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"FoodDelivery/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"FoodDelivery/client/src/components/BackToTop.tsx":{"content":"import { ArrowUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport function BackToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility);\n    return () => window.removeEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.8 }}\n          className=\"fixed bottom-8 right-8 z-50\"\n        >\n          <Button\n            size=\"icon\"\n            className=\"rounded-full h-12 w-12 shadow-lg\"\n            onClick={scrollToTop}\n            data-testid=\"button-back-to-top\"\n          >\n            <ArrowUp className=\"h-5 w-5\" />\n          </Button>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":1292},"FoodDelivery/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"FoodDelivery/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"FoodDelivery/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"-1000px 0\" },\n          \"100%\": { backgroundPosition: \"1000px 0\" },\n        },\n        \"slide-in-right\": {\n          \"0%\": { transform: \"translateX(100%)\" },\n          \"100%\": { transform: \"translateX(0)\" },\n        },\n        \"slide-out-right\": {\n          \"0%\": { transform: \"translateX(0)\" },\n          \"100%\": { transform: \"translateX(100%)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        shimmer: \"shimmer 2s infinite linear\",\n        \"slide-in-right\": \"slide-in-right 0.3s ease-out\",\n        \"slide-out-right\": \"slide-out-right 0.3s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4632},"FoodDelivery/client/src/components/LocationDropdown.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Home, Briefcase, Navigation } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { savedAddresses } from \"@/lib/mockData\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { MapContainer, TileLayer, Marker, useMapEvents } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n});\n\ninterface LocationDropdownProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectLocation: (location: string) => void;\n}\n\nfunction LocationMarker({ onLocationSelect }: { onLocationSelect: (lat: number, lng: number) => void }) {\n  const [position, setPosition] = useState<[number, number] | null>(null);\n  \n  useMapEvents({\n    click(e) {\n      setPosition([e.latlng.lat, e.latlng.lng]);\n      onLocationSelect(e.latlng.lat, e.latlng.lng);\n    },\n  });\n\n  return position === null ? null : <Marker position={position} />;\n}\n\nexport function LocationDropdown({ isOpen, onClose, onSelectLocation }: LocationDropdownProps) {\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const [selectedPosition, setSelectedPosition] = useState<[number, number]>([28.6139, 77.2090]);\n  const [mapKey, setMapKey] = useState(0);\n\n  const handleSelectLocation = (address: string) => {\n    onSelectLocation(address);\n    onClose();\n  };\n\n  const handleMapClick = (lat: number, lng: number) => {\n    setSelectedPosition([lat, lng]);\n    const address = `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;\n    setManualAddress(address);\n  };\n\n  const handleAddressChange = (value: string) => {\n    setManualAddress(value);\n    \n    const locationMap: Record<string, [number, number]> = {\n      \"new york\": [40.7128, -74.0060],\n      \"delhi\": [28.6139, 77.2090],\n      \"mumbai\": [19.0760, 72.8777],\n      \"london\": [51.5074, -0.1278],\n      \"tokyo\": [35.6762, 139.6503],\n      \"paris\": [48.8566, 2.3522],\n      \"bangalore\": [12.9716, 77.5946],\n    };\n\n    const lowerValue = value.toLowerCase();\n    for (const [city, coords] of Object.entries(locationMap)) {\n      if (lowerValue.includes(city)) {\n        setSelectedPosition(coords);\n        setMapKey(prev => prev + 1);\n        break;\n      }\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className=\"fixed inset-0 bg-black/50 z-40\" onClick={onClose} data-testid=\"location-backdrop\" />\n      <AnimatePresence>\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          className=\"absolute top-20 left-4 md:left-auto md:ml-32 bg-popover border border-popover-border rounded-xl shadow-xl z-50 w-[calc(100%-2rem)] md:w-[500px] p-4\"\n          data-testid=\"location-dropdown\"\n        >\n          <h3 className=\"font-semibold mb-4\">Select Location</h3>\n\n          <Tabs defaultValue=\"map\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"map\" data-testid=\"tab-map\">Map</TabsTrigger>\n              <TabsTrigger value=\"manual\" data-testid=\"tab-manual\">Manual</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"map\" className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Input\n                  value={manualAddress}\n                  onChange={(e) => handleAddressChange(e.target.value)}\n                  placeholder=\"Type a location (e.g., New York, Delhi, London)\"\n                  data-testid=\"input-map-search\"\n                />\n              </div>\n              <div className=\"h-64 rounded-lg overflow-hidden border\" data-testid=\"map-container\">\n                <MapContainer\n                  key={mapKey}\n                  center={selectedPosition}\n                  zoom={13}\n                  style={{ height: \"100%\", width: \"100%\" }}\n                >\n                  <TileLayer\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  />\n                  <LocationMarker onLocationSelect={handleMapClick} />\n                </MapContainer>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">Type a location or click on the map to select your location</p>\n              {manualAddress && (\n                <Button\n                  onClick={() => handleSelectLocation(manualAddress)}\n                  className=\"w-full\"\n                  data-testid=\"button-confirm-map-address\"\n                >\n                  Confirm Location\n                </Button>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"manual\" className=\"space-y-4\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start gap-3\"\n                onClick={() => handleSelectLocation(\"Current Location\")}\n                data-testid=\"button-current-location\"\n              >\n                <Navigation className=\"h-4 w-4 text-primary\" />\n                Use Current Location\n              </Button>\n\n              <div>\n                <Input\n                  placeholder=\"Enter delivery address (e.g., New York, Delhi, London)\"\n                  value={manualAddress}\n                  onChange={(e) => handleAddressChange(e.target.value)}\n                  className=\"mb-2\"\n                  data-testid=\"input-manual-address\"\n                />\n                <Button\n                  onClick={() => manualAddress && handleSelectLocation(manualAddress)}\n                  disabled={!manualAddress}\n                  className=\"w-full\"\n                  data-testid=\"button-confirm-address\"\n                >\n                  Confirm Address\n                </Button>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <p className=\"text-sm text-muted-foreground mb-3\">Saved Addresses</p>\n                <div className=\"space-y-2\">\n                  {savedAddresses.map((addr) => (\n                    <Button\n                      key={addr.id}\n                      variant=\"ghost\"\n                      className=\"w-full justify-start gap-3\"\n                      onClick={() => handleSelectLocation(addr.address)}\n                      data-testid={`button-saved-${addr.label.toLowerCase()}`}\n                    >\n                      {addr.label === \"Home\" ? (\n                        <Home className=\"h-4 w-4\" />\n                      ) : (\n                        <Briefcase className=\"h-4 w-4\" />\n                      )}\n                      <div className=\"text-left\">\n                        <p className=\"font-medium text-sm\">{addr.label}</p>\n                        <p className=\"text-xs text-muted-foreground\">{addr.address}</p>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </motion.div>\n      </AnimatePresence>\n    </>\n  );\n}\n","size_bytes":7556},"FoodDelivery/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"FoodDelivery/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"FoodDelivery/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"FoodDelivery/client/src/components/admin/MetricsSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from \"recharts\";\nimport { DollarSign, ShoppingCart, TrendingUp, Calendar } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface OrderData {\n  date: string;\n  revenue: number;\n  orders: number;\n}\n\nexport function MetricsSection() {\n  const { adminProfile } = useAuth();\n  const [timeRange, setTimeRange] = useState<\"today\" | \"7days\" | \"30days\" | \"3months\" | \"6months\" | \"1year\" | \"custom\">(\"7days\");\n  const [customStartDate, setCustomStartDate] = useState(\"\");\n  const [customEndDate, setCustomEndDate] = useState(\"\");\n  const [metrics, setMetrics] = useState<OrderData[]>([]);\n  const [totalRevenue, setTotalRevenue] = useState(0);\n  const [totalOrders, setTotalOrders] = useState(0);\n  const [topItems, setTopItems] = useState<{ name: string; count: number }[]>([]);\n\n  useEffect(() => {\n    calculateMetrics();\n  }, [timeRange, customStartDate, customEndDate, adminProfile]);\n\n  const calculateMetrics = () => {\n    const allUsers = JSON.parse(localStorage.getItem('foodhub_users') || '[]');\n    const currentRestaurantId = adminProfile?.restaurantId;\n    const now = new Date();\n    let startDate = new Date();\n\n    switch (timeRange) {\n      case \"today\":\n        startDate.setHours(0, 0, 0, 0);\n        break;\n      case \"7days\":\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case \"30days\":\n        startDate.setDate(now.getDate() - 30);\n        break;\n      case \"3months\":\n        startDate.setMonth(now.getMonth() - 3);\n        break;\n      case \"6months\":\n        startDate.setMonth(now.getMonth() - 6);\n        break;\n      case \"1year\":\n        startDate.setFullYear(now.getFullYear() - 1);\n        break;\n      case \"custom\":\n        if (customStartDate) {\n          startDate = new Date(customStartDate);\n        }\n        break;\n    }\n\n    const endDate = timeRange === \"custom\" && customEndDate ? new Date(customEndDate) : now;\n\n    // Only count orders that have been accepted (not \"New\")\n    // Revenue only counts from \"Delivered\" orders\n    const acceptedOrders: any[] = [];\n    const deliveredOrders: any[] = [];\n    const itemCounts: Record<string, number> = {};\n\n    allUsers.forEach((user: any) => {\n      if (user.orders && Array.isArray(user.orders)) {\n        user.orders.forEach((order: any) => {\n          // Only include orders for this admin's restaurant\n          const isRestaurantMatch = !currentRestaurantId || order.restaurantId === currentRestaurantId || !order.restaurantId;\n          const orderDate = order.orderDate ? new Date(order.orderDate) : new Date();\n          \n          // Only count orders that admin has accepted (not \"New\" or \"Denied\")\n          // Accepted statuses: \"Preparing\", \"On the Way\", \"Delivered\"\n          const acceptedStatuses = [\"Preparing\", \"On the Way\", \"Delivered\"];\n          const isAccepted = acceptedStatuses.includes(order.status);\n          \n          if (isRestaurantMatch && orderDate >= startDate && orderDate <= endDate && isAccepted) {\n            acceptedOrders.push({ ...order, date: orderDate });\n            \n            // Only count delivered orders for revenue\n            if (order.status === \"Delivered\") {\n              deliveredOrders.push({ ...order, date: orderDate });\n            }\n            \n            // Count items from all accepted orders (not just delivered)\n            if (order.items && Array.isArray(order.items)) {\n              order.items.forEach((item: string) => {\n                itemCounts[item] = (itemCounts[item] || 0) + 1;\n              });\n            }\n          }\n        });\n      }\n    });\n\n    // Chart data based on delivered orders for revenue\n    const dailyData: Record<string, OrderData> = {};\n    deliveredOrders.forEach(order => {\n      const dateKey = order.date.toISOString().split('T')[0];\n      if (!dailyData[dateKey]) {\n        dailyData[dateKey] = { date: dateKey, revenue: 0, orders: 0 };\n      }\n      dailyData[dateKey].revenue += order.total || 0;\n      dailyData[dateKey].orders += 1;\n    });\n\n    const chartData = Object.values(dailyData).sort((a, b) => \n      new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n\n    // Total revenue only from delivered orders\n    const revenue = deliveredOrders.reduce((sum, order) => sum + (order.total || 0), 0);\n    \n    // Total orders count all accepted orders (preparing, ready, delivered)\n    const topItemsData = Object.entries(itemCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    setMetrics(chartData);\n    setTotalRevenue(revenue);\n    setTotalOrders(acceptedOrders.length);\n    setTopItems(topItemsData);\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-metrics-title\">Business Metrics</h1>\n        <div className=\"flex gap-2 items-end\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"time-range\">Time Range</Label>\n            <Select value={timeRange} onValueChange={(val: any) => setTimeRange(val)}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-time-range\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"7days\">Last 7 Days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 Days</SelectItem>\n                <SelectItem value=\"3months\">Last 3 Months</SelectItem>\n                <SelectItem value=\"6months\">Last 6 Months</SelectItem>\n                <SelectItem value=\"1year\">Last Year</SelectItem>\n                <SelectItem value=\"custom\">Custom Range</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {timeRange === \"custom\" && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={customStartDate}\n                  onChange={(e) => setCustomStartDate(e.target.value)}\n                  data-testid=\"input-custom-start\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={customEndDate}\n                  onChange={(e) => setCustomEndDate(e.target.value)}\n                  data-testid=\"input-custom-end\"\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6\">\n        <Card data-testid=\"card-total-revenue\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">₹{totalRevenue.toFixed(2)}</div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-total-orders\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-orders\">{totalOrders}</div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-avg-order\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Order Value</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-avg-order\">\n              ₹{totalOrders > 0 ? (totalRevenue / totalOrders).toFixed(2) : \"0.00\"}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-date-range\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Date Range</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm font-bold\" data-testid=\"text-date-range\">\n              {timeRange === \"custom\" \n                ? `${customStartDate || \"Start\"} to ${customEndDate || \"End\"}` \n                : timeRange.replace(/([0-9]+)/, \" $1 \").replace(\"days\", \"Days\").replace(\"months\", \"Months\").replace(\"year\", \"Year\")}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 mb-6\">\n        <Card data-testid=\"card-revenue-chart\">\n          <CardHeader>\n            <CardTitle>Revenue Over Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={metrics}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-orders-chart\">\n          <CardHeader>\n            <CardTitle>Orders Over Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={metrics}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"orders\" fill=\"hsl(var(--primary))\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card data-testid=\"card-top-items\">\n        <CardHeader>\n          <CardTitle>Top Selling Items</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {topItems.length > 0 ? (\n            <div className=\"space-y-3\">\n              {topItems.map((item, idx) => (\n                <div key={idx} className=\"flex items-center justify-between\" data-testid={`item-top-${idx}`}>\n                  <span className=\"font-medium\" data-testid={`text-item-name-${idx}`}>{item.name}</span>\n                  <span className=\"text-muted-foreground\" data-testid={`text-item-count-${idx}`}>{item.count} orders</span>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-data\">No data available for selected range</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11734},"FoodDelivery/client/src/components/FoodDetailModal.tsx":{"content":"import { X, Star, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { FoodItem } from \"@/lib/mockData\";\nimport { useState } from \"react\";\n\ninterface FoodDetailModalProps {\n  item: FoodItem | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onAddToCart: (item: FoodItem) => void;\n}\n\nexport function FoodDetailModal({ item, isOpen, onClose, onAddToCart }: FoodDetailModalProps) {\n  const [comment, setComment] = useState(\"\");\n\n  if (!item || !isOpen) return null;\n\n  const handleAddToCart = () => {\n    onAddToCart(item);\n    if (comment) {\n      console.log(\"Order comment:\", comment);\n    }\n    setComment(\"\");\n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n          data-testid=\"food-detail-backdrop\"\n        />\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-3xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\"\n          data-testid=\"food-detail-modal\"\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4 z-10\"\n            data-testid=\"button-close-detail\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n\n          <div className=\"relative aspect-[16/9] overflow-hidden\">\n            <img\n              src={item.image}\n              alt={item.name}\n              className=\"w-full h-full object-cover\"\n            />\n            {item.offer && (\n              <Badge className=\"absolute top-4 left-4 bg-accent text-accent-foreground text-sm\">\n                {item.offer}\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"p-6 space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between gap-4 mb-2\">\n                <div>\n                  <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"detail-food-name\">{item.name}</h2>\n                  <p className=\"text-muted-foreground\" data-testid=\"detail-restaurant\">{item.restaurant}</p>\n                </div>\n                {item.isVeg && (\n                  <div className=\"h-6 w-6 border-2 border-green-600 flex items-center justify-center bg-white rounded-sm flex-shrink-0\">\n                    <div className=\"h-3 w-3 bg-green-600 rounded-full\"></div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4 mt-3\">\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"h-5 w-5 fill-yellow-500 text-yellow-500\" />\n                  <span className=\"font-semibold\" data-testid=\"detail-rating\">{item.rating}</span>\n                </div>\n                <div className=\"text-2xl font-bold\" data-testid=\"detail-price\">₹{item.price}</div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-2\">Description</h3>\n              <p className=\"text-muted-foreground\" data-testid=\"detail-description\">{item.description}</p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"comment\" className=\"mb-2 block\">Add a comment (optional)</Label>\n              <Textarea\n                id=\"comment\"\n                placeholder=\"Any special instructions or preferences...\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"input-comment\"\n              />\n            </div>\n\n            <Button\n              className=\"w-full gap-2\"\n              size=\"lg\"\n              onClick={handleAddToCart}\n              data-testid=\"button-add-to-cart-detail\"\n            >\n              <Plus className=\"h-5 w-5\" />\n              Add to Cart - ₹{item.price}\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n}\n","size_bytes":4497},"FoodDelivery/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"FoodDelivery/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"FoodDelivery/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"FoodDelivery/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"FoodDelivery/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"FoodDelivery/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"FoodDelivery/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"FoodDelivery/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"FoodDelivery/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"FoodDelivery/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"FoodDelivery/client/src/components/FoodCard.tsx":{"content":"import { Star, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { motion } from \"framer-motion\";\nimport type { FoodItem } from \"@/lib/mockData\";\n\ninterface FoodCardProps {\n  item: FoodItem;\n  onAddToCart: (item: FoodItem) => void;\n  onClick: (item: FoodItem) => void;\n}\n\nexport function FoodCard({ item, onAddToCart, onClick }: FoodCardProps) {\n  return (\n    <motion.div\n      whileHover={{ y: -4 }}\n      transition={{ duration: 0.2 }}\n    >\n      <Card\n        className=\"overflow-hidden cursor-pointer group flex-shrink-0 w-72 hover-elevate\"\n        onClick={() => onClick(item)}\n        data-testid={`food-card-${item.id}`}\n      >\n        <div className=\"relative aspect-[4/3] overflow-hidden\">\n          <img\n            src={item.image}\n            alt={item.name}\n            className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n          />\n          {item.offer && (\n            <Badge className=\"absolute top-3 right-3 bg-accent text-accent-foreground\" data-testid={`offer-badge-${item.id}`}>\n              {item.offer}\n            </Badge>\n          )}\n          {item.isVeg && (\n            <div className=\"absolute top-3 left-3 h-5 w-5 border-2 border-green-600 flex items-center justify-center bg-white rounded-sm\">\n              <div className=\"h-2.5 w-2.5 bg-green-600 rounded-full\"></div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4\">\n          <div className=\"flex items-start justify-between gap-2 mb-2\">\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold truncate\" data-testid={`food-name-${item.id}`}>{item.name}</h3>\n              <p className=\"text-sm text-muted-foreground truncate\">{item.restaurant}</p>\n            </div>\n            <Button\n              size=\"icon\"\n              className=\"flex-shrink-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onAddToCart(item);\n              }}\n              data-testid={`button-add-${item.id}`}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between mt-3\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n              <span className=\"font-medium text-sm\" data-testid={`rating-${item.id}`}>{item.rating}</span>\n            </div>\n            <span className=\"font-bold\" data-testid={`price-${item.id}`}>₹{item.price}</span>\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":2733},"FoodDelivery/client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { Restaurant } from \"./DataContext\";\n\ninterface Order {\n  id: string;\n  items: string[];\n  total: number;\n  restaurant: string;\n  restaurantId?: string;\n  status: \"New\" | \"Preparing\" | \"On the Way\" | \"Delivered\" | \"Denied\";\n  deliveryDate: string;\n  deliveryTime: string;\n  paymentMethod?: string;\n  orderDate?: string;\n}\n\ninterface UserData {\n  username: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  password: string;\n  orders: Order[];\n  avatar?: string;\n  userType: \"customer\" | \"admin\";\n  restaurantName?: string;\n  restaurantLocation?: string;\n}\n\ninterface PublicUserData {\n  username: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  orders: Order[];\n  avatar?: string;\n  userType: \"customer\" | \"admin\";\n}\n\ninterface AdminData {\n  restaurantName: string;\n  restaurantId: string;\n  branches: string;\n  location: string;\n  contact: string;\n  managerName: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: PublicUserData | null;\n  login: (email: string, password: string) => boolean;\n  register: (userData: Omit<UserData, 'orders'>, addRestaurant?: (restaurant: Restaurant) => void) => boolean;\n  logout: () => void;\n  updateUser: (userData: Partial<PublicUserData>) => void;\n  addOrder: (order: Order) => void;\n  adminProfile: AdminData | null;\n  updateAdminProfile: (data: Partial<AdminData>) => void;\n}\n\nexport type { UserData, PublicUserData, AdminData, Order };\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst USERS_KEY = 'foodhub_users';\nconst CURRENT_USER_KEY = 'foodhub_current_user';\nconst ADMIN_PROFILES_KEY = 'foodhub_admin_profiles';\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<PublicUserData | null>(null);\n  const [adminProfile, setAdminProfile] = useState<AdminData | null>(null);\n\n  useEffect(() => {\n    const currentUserEmail = localStorage.getItem(CURRENT_USER_KEY);\n    if (currentUserEmail) {\n      const users = getUsersFromStorage();\n      const foundUser = users.find(u => u.email === currentUserEmail);\n      if (foundUser) {\n        const { password, ...publicData } = foundUser;\n        setUser(publicData);\n        setIsAuthenticated(true);\n        \n        if (foundUser.userType === 'admin') {\n          const adminProfiles = getAdminProfilesFromStorage();\n          const profile = adminProfiles[foundUser.email];\n          if (profile) {\n            setAdminProfile(profile);\n          }\n        }\n      }\n    }\n  }, []);\n\n  const getAdminProfilesFromStorage = (): Record<string, AdminData> => {\n    const profilesJson = localStorage.getItem(ADMIN_PROFILES_KEY);\n    return profilesJson ? JSON.parse(profilesJson) : {};\n  };\n\n  const saveAdminProfile = (email: string, profile: AdminData) => {\n    const profiles = getAdminProfilesFromStorage();\n    profiles[email] = profile;\n    localStorage.setItem(ADMIN_PROFILES_KEY, JSON.stringify(profiles));\n  };\n\n  const getUsersFromStorage = (): UserData[] => {\n    const usersJson = localStorage.getItem(USERS_KEY);\n    return usersJson ? JSON.parse(usersJson) : [];\n  };\n\n  const saveUsersToStorage = (users: UserData[]) => {\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  };\n\n  const register = (userData: Omit<UserData, 'orders'>, addRestaurant?: (restaurant: Restaurant) => void): boolean => {\n    const users = getUsersFromStorage();\n    \n    if (users.some(u => u.email === userData.email)) {\n      return false;\n    }\n\n    if (users.some(u => u.username === userData.username)) {\n      return false;\n    }\n\n    const newUser: UserData = {\n      ...userData,\n      orders: []\n    };\n\n    users.push(newUser);\n    saveUsersToStorage(users);\n\n    if (userData.userType === 'admin') {\n      const restaurantId = `REST-${Date.now()}`;\n      const defaultAdminProfile: AdminData = {\n        restaurantName: userData.restaurantName || 'My Restaurant',\n        restaurantId,\n        branches: '1',\n        location: userData.restaurantLocation || 'Not Set',\n        contact: userData.phone || 'Not Set',\n        managerName: userData.name || 'Not Set'\n      };\n      saveAdminProfile(userData.email, defaultAdminProfile);\n      setAdminProfile(defaultAdminProfile);\n\n      // Register restaurant in unified data system\n      if (addRestaurant) {\n        const restaurant: Restaurant = {\n          id: restaurantId,\n          name: userData.restaurantName || 'My Restaurant',\n          location: userData.restaurantLocation || 'Not Set',\n          adminEmail: userData.email,\n          rating: 4.0,\n          createdAt: new Date().toISOString()\n        };\n        addRestaurant(restaurant);\n      }\n    }\n\n    const { password, ...publicData } = newUser;\n    setUser(publicData);\n    setIsAuthenticated(true);\n    localStorage.setItem(CURRENT_USER_KEY, userData.email);\n    \n    return true;\n  };\n\n  const login = (email: string, password: string): boolean => {\n    const users = getUsersFromStorage();\n    const foundUser = users.find(u => u.email === email && u.password === password);\n    \n    if (foundUser) {\n      const { password: _, ...publicData } = foundUser;\n      setUser(publicData);\n      setIsAuthenticated(true);\n      localStorage.setItem(CURRENT_USER_KEY, email);\n      \n      if (foundUser.userType === 'admin') {\n        const adminProfiles = getAdminProfilesFromStorage();\n        const profile = adminProfiles[email];\n        if (profile) {\n          setAdminProfile(profile);\n        }\n      }\n      \n      return true;\n    }\n    \n    return false;\n  };\n\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    setAdminProfile(null);\n    localStorage.removeItem(CURRENT_USER_KEY);\n  };\n\n  const updateUser = (userData: Partial<PublicUserData>) => {\n    if (user) {\n      const users = getUsersFromStorage();\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex !== -1) {\n        users[userIndex] = { ...users[userIndex], ...userData };\n        saveUsersToStorage(users);\n        \n        setUser({ ...user, ...userData });\n      }\n    }\n  };\n\n  const addOrder = (order: Order) => {\n    if (user) {\n      const users = getUsersFromStorage();\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex !== -1) {\n        users[userIndex].orders.unshift(order);\n        saveUsersToStorage(users);\n        \n        setUser({ ...user, orders: users[userIndex].orders });\n      }\n    }\n  };\n\n  const updateAdminProfile = (data: Partial<AdminData>) => {\n    if (user && user.userType === 'admin') {\n      const updatedProfile = { ...adminProfile, ...data } as AdminData;\n      setAdminProfile(updatedProfile);\n      saveAdminProfile(user.email, updatedProfile);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, register, logout, updateUser, addOrder, adminProfile, updateAdminProfile }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":7327},"FoodDelivery/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { DataProvider } from \"@/contexts/DataContext\";\nimport { useState } from \"react\";\nimport Home from \"@/pages/Home\";\nimport Profile from \"@/pages/Profile\";\nimport TrackOrder from \"@/pages/TrackOrder\";\nimport Cart from \"@/pages/Cart\";\nimport Payment from \"@/pages/Payment\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [cartItems, setCartItems] = useState<Array<{ id: string; name: string; price: number; quantity: number; restaurant?: string }>>([]);\n  const [appliedOffer, setAppliedOffer] = useState<{ id: string; title: string; description: string; discountValue: number } | null>(null);\n\n  const handleRemoveFromCart = (id: string) => {\n    setCartItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity === 0) {\n      handleRemoveFromCart(id);\n    } else {\n      setCartItems((prev) =>\n        prev.map((item) => (item.id === id ? { ...item, quantity } : item))\n      );\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/track-order\" component={TrackOrder} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/cart\">\n        <Cart \n          items={cartItems} \n          onRemoveFromCart={handleRemoveFromCart}\n          onUpdateQuantity={handleUpdateQuantity}\n          appliedOffer={appliedOffer}\n        />\n      </Route>\n      <Route path=\"/payment\">\n        <Payment \n          items={cartItems} \n          onClearCart={() => {\n            setCartItems([]);\n            setAppliedOffer(null);\n          }} \n        />\n      </Route>\n      <Route path={/^\\/$/}>\n        <Home \n          cartItems={cartItems} \n          setCartItems={setCartItems} \n          appliedOffer={appliedOffer}\n          setAppliedOffer={setAppliedOffer}\n        />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <DataProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </DataProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2596},"FoodDelivery/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"FoodDelivery/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"FoodDelivery/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"FoodDelivery/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"FoodDelivery/client/src/components/examples/FilterBar.tsx":{"content":"import { FilterBar, FilterState } from \"../FilterBar\";\nimport { useState } from \"react\";\n\nexport default function FilterBarExample() {\n  const [filters, setFilters] = useState<FilterState>({\n    vegOnly: false,\n    priceRange: \"all\",\n    nearby: false,\n    rating: \"all\",\n    hasOffers: false,\n    sortBy: \"default\",\n  });\n\n  return <FilterBar filters={filters} onFilterChange={setFilters} />;\n}\n","size_bytes":396},"FoodDelivery/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 0 0% 91%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 255 84% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 92%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 255 84% 50%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 0 0% 90%;\n\n  --primary: 255 84% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 90%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 0 5% 88%;\n\n  --muted-foreground: 220 13% 35%;\n\n  --accent: 45 93% 58%;\n\n  --accent-foreground: 220 13% 18%;\n\n  --destructive: 0 84% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 70%;\n  --ring: 255 84% 50%;\n  --chart-1: 255 84% 50%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 45 93% 58%;\n  --chart-4: 280 70% 50%;\n  --chart-5: 210 80% 50%;\n\n  --font-sans: 'Inter', 'Plus Jakarta Sans', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -1px hsl(220 13% 18% / 0.06);\n  --shadow-md: 0px 6px 10px -3px hsl(220 13% 18% / 0.08), 0px 4px 6px -2px hsl(220 13% 18% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 18% / 0.10), 0px 4px 6px -2px hsl(220 13% 18% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 18% / 0.10), 0px 10px 10px -5px hsl(220 13% 18% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 18% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 12%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 13% 22%;\n\n  --card: 220 13% 15%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 13% 19%;\n\n  --sidebar: 220 13% 18%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 13% 22%;\n\n  --sidebar-primary: 255 84% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 13% 22%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 255 84% 55%;\n\n  --popover: 220 13% 20%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 13% 24%;\n\n  --primary: 255 84% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 24%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 10% 22%;\n\n  --muted-foreground: 0 0% 75%;\n\n  --accent: 45 93% 58%;\n\n  --accent-foreground: 220 13% 12%;\n\n  --destructive: 0 84% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 35%;\n  --ring: 255 84% 55%;\n  --chart-1: 255 84% 65%;\n  --chart-2: 142 71% 60%;\n  --chart-3: 45 93% 68%;\n  --chart-4: 280 70% 65%;\n  --chart-5: 210 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 10px -3px hsl(0 0% 0% / 0.25), 0px 4px 6px -2px hsl(0 0% 0% / 0.15);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.30), 0px 4px 6px -2px hsl(0 0% 0% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.30), 0px 10px 10px -5px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9820},"FoodDelivery/client/src/components/admin/OrdersSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Check, X, Clock, Package as PackageIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Order } from \"@/contexts/AuthContext\";\n\ninterface OrderWithStatus extends Order {\n  ticketId: string;\n  customerName: string;\n  customerEmail: string;\n  orderStatus: \"new\" | \"preparing\" | \"ready\" | \"delivered\" | \"denied\";\n  itemsOutOfStock?: string[];\n}\n\nconst ADMIN_ORDERS_KEY = 'foodhub_admin_orders';\n\nexport function OrdersSection() {\n  const { toast } = useToast();\n  const { adminProfile } = useAuth();\n  const [orders, setOrders] = useState<OrderWithStatus[]>([]);\n\n  useEffect(() => {\n    loadOrders();\n  }, [adminProfile]);\n\n  const loadOrders = () => {\n    const allUsers = JSON.parse(localStorage.getItem('foodhub_users') || '[]');\n    const adminOrders: OrderWithStatus[] = [];\n    const currentRestaurantId = adminProfile?.restaurantId;\n    \n    allUsers.forEach((user: any) => {\n      if (user.orders && Array.isArray(user.orders)) {\n        user.orders.forEach((order: Order) => {\n          // Only include orders for this admin's restaurant\n          if (!currentRestaurantId || order.restaurantId === currentRestaurantId || !order.restaurantId) {\n            const existingOrder = adminOrders.find(o => o.id === order.id);\n            if (!existingOrder) {\n              adminOrders.push({\n                ...order,\n                ticketId: `TKT-${order.id.slice(0, 8)}`,\n                customerName: user.name,\n                customerEmail: user.email,\n                orderStatus: getOrderStatusFromStatus(order.status),\n                itemsOutOfStock: []\n              });\n            }\n          }\n        });\n      }\n    });\n    \n    const savedOrders = JSON.parse(localStorage.getItem(ADMIN_ORDERS_KEY) || '{}');\n    const mergedOrders = adminOrders.map(order => ({\n      ...order,\n      orderStatus: savedOrders[order.id]?.orderStatus || order.orderStatus,\n      itemsOutOfStock: savedOrders[order.id]?.itemsOutOfStock || []\n    }));\n    \n    setOrders(mergedOrders);\n  };\n\n  const getOrderStatusFromStatus = (status: string): \"new\" | \"preparing\" | \"ready\" | \"delivered\" | \"denied\" => {\n    if (status === \"New\") return \"new\";\n    if (status === \"Preparing\") return \"preparing\";\n    if (status === \"On the Way\") return \"ready\";\n    if (status === \"Delivered\") return \"delivered\";\n    if (status === \"Denied\") return \"denied\";\n    return \"new\";\n  };\n\n  const updateOrderStatus = (orderId: string, newStatus: \"new\" | \"preparing\" | \"ready\" | \"delivered\" | \"denied\") => {\n    // Update admin orders tracking\n    const savedOrders = JSON.parse(localStorage.getItem(ADMIN_ORDERS_KEY) || '{}');\n    savedOrders[orderId] = { \n      ...(savedOrders[orderId] || {}), \n      orderStatus: newStatus \n    };\n    localStorage.setItem(ADMIN_ORDERS_KEY, JSON.stringify(savedOrders));\n    \n    // Update the user's order in their profile so they see real-time updates\n    const statusMapping = {\n      \"new\": \"New\",\n      \"preparing\": \"Preparing\",\n      \"ready\": \"On the Way\",\n      \"delivered\": \"Delivered\",\n      \"denied\": \"Denied\"\n    };\n    \n    const allUsers = JSON.parse(localStorage.getItem('foodhub_users') || '[]');\n    let updated = false;\n    \n    allUsers.forEach((user: any) => {\n      if (user.orders && Array.isArray(user.orders)) {\n        user.orders = user.orders.map((order: Order) => {\n          if (order.id === orderId) {\n            updated = true;\n            return { ...order, status: statusMapping[newStatus] as Order['status'] };\n          }\n          return order;\n        });\n      }\n    });\n    \n    if (updated) {\n      localStorage.setItem('foodhub_users', JSON.stringify(allUsers));\n    }\n    \n    setOrders(prev => prev.map(order => \n      order.id === orderId ? { ...order, orderStatus: newStatus } : order\n    ));\n    \n    // Show descriptive toast messages\n    let toastMessage = '';\n    if (newStatus === \"preparing\") {\n      toastMessage = \"Order accepted and moved to Preparing\";\n    } else if (newStatus === \"ready\") {\n      toastMessage = \"Order marked as Ready for delivery\";\n    } else if (newStatus === \"delivered\") {\n      toastMessage = \"Order marked as Delivered\";\n    } else if (newStatus === \"denied\") {\n      toastMessage = \"Order denied and customer notified\";\n    } else {\n      toastMessage = `Order status changed to ${newStatus}`;\n    }\n    \n    toast({\n      title: \"Order Updated\",\n      description: toastMessage,\n      variant: newStatus === \"denied\" ? \"destructive\" : \"default\",\n    });\n  };\n\n  const markItemOutOfStock = (orderId: string, item: string) => {\n    const savedOrders = JSON.parse(localStorage.getItem(ADMIN_ORDERS_KEY) || '{}');\n    const currentOrder = savedOrders[orderId] || {};\n    const outOfStock = currentOrder.itemsOutOfStock || [];\n    \n    if (!outOfStock.includes(item)) {\n      outOfStock.push(item);\n      savedOrders[orderId] = { ...currentOrder, itemsOutOfStock: outOfStock };\n      localStorage.setItem(ADMIN_ORDERS_KEY, JSON.stringify(savedOrders));\n      \n      setOrders(prev => prev.map(order => \n        order.id === orderId ? { ...order, itemsOutOfStock: outOfStock } : order\n      ));\n      \n      toast({\n        title: \"Item Marked\",\n        description: `${item} marked as out of stock`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filterOrders = (status: string) => {\n    if (status === \"new\") return orders.filter(o => o.orderStatus === \"new\");\n    if (status === \"preparing\") return orders.filter(o => o.orderStatus === \"preparing\");\n    if (status === \"ready\") return orders.filter(o => o.orderStatus === \"ready\");\n    if (status === \"past\") return orders.filter(o => o.orderStatus === \"delivered\" || o.orderStatus === \"denied\");\n    return orders;\n  };\n\n  const OrderCard = ({ order }: { order: OrderWithStatus }) => (\n    <Card key={order.id} data-testid={`card-order-${order.id}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-lg\" data-testid={`text-ticket-${order.ticketId}`}>{order.ticketId}</CardTitle>\n        <Badge variant={order.orderStatus === \"new\" ? \"default\" : \"secondary\"} data-testid={`badge-status-${order.id}`}>\n          {order.orderStatus}\n        </Badge>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div>\n          <p className=\"text-sm font-medium\" data-testid={`text-customer-${order.id}`}>Customer: {order.customerName}</p>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`text-email-${order.id}`}>{order.customerEmail}</p>\n        </div>\n        \n        <div>\n          <p className=\"text-sm font-medium mb-1\">Items:</p>\n          <div className=\"space-y-1\">\n            {order.items.map((item, idx) => (\n              <div key={idx} className=\"flex items-center justify-between text-sm\">\n                <span className={order.itemsOutOfStock?.includes(item) ? \"line-through text-muted-foreground\" : \"\"} data-testid={`text-item-${order.id}-${idx}`}>\n                  {item}\n                </span>\n                {!order.itemsOutOfStock?.includes(item) && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => markItemOutOfStock(order.id, item)}\n                    data-testid={`button-out-of-stock-${order.id}-${idx}`}\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm\">\n          <span data-testid={`text-total-${order.id}`}>Total: ₹{order.total}</span>\n          <span data-testid={`text-date-${order.id}`}>{order.deliveryDate}</span>\n        </div>\n        \n        <div className=\"text-sm text-muted-foreground\">\n          <p data-testid={`text-payment-${order.id}`}>Payment: {order.paymentMethod || \"COD\"}</p>\n        </div>\n        \n        <div className=\"flex gap-2 pt-2 flex-wrap\">\n          {order.orderStatus === \"new\" && (\n            <>\n              <Button size=\"sm\" onClick={() => updateOrderStatus(order.id, \"preparing\")} data-testid={`button-accept-${order.id}`}>\n                <Check className=\"mr-1 h-3 w-3\" />\n                Accept\n              </Button>\n              <Button size=\"sm\" variant=\"destructive\" onClick={() => updateOrderStatus(order.id, \"denied\")} data-testid={`button-deny-${order.id}`}>\n                <X className=\"mr-1 h-3 w-3\" />\n                Deny\n              </Button>\n            </>\n          )}\n          {order.orderStatus === \"preparing\" && (\n            <Button size=\"sm\" onClick={() => updateOrderStatus(order.id, \"ready\")} data-testid={`button-ready-${order.id}`}>\n              <PackageIcon className=\"mr-1 h-3 w-3\" />\n              Mark Ready\n            </Button>\n          )}\n          {order.orderStatus === \"ready\" && (\n            <Button size=\"sm\" onClick={() => updateOrderStatus(order.id, \"delivered\")} data-testid={`button-delivered-${order.id}`}>\n              <Check className=\"mr-1 h-3 w-3\" />\n              Delivered\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div>\n      <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"text-orders-title\">Orders Management</h1>\n      \n      <Tabs defaultValue=\"new\" className=\"w-full\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"new\" data-testid=\"tab-new-orders\">\n            <Clock className=\"mr-2 h-4 w-4\" />\n            New ({filterOrders(\"new\").length})\n          </TabsTrigger>\n          <TabsTrigger value=\"preparing\" data-testid=\"tab-preparing-orders\">\n            Preparing ({filterOrders(\"preparing\").length})\n          </TabsTrigger>\n          <TabsTrigger value=\"ready\" data-testid=\"tab-ready-orders\">\n            Ready ({filterOrders(\"ready\").length})\n          </TabsTrigger>\n          <TabsTrigger value=\"past\" data-testid=\"tab-past-orders\">\n            Past Orders ({filterOrders(\"past\").length})\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"new\" className=\"space-y-4\">\n          {filterOrders(\"new\").length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-new-orders\">No new orders</p>\n          ) : (\n            filterOrders(\"new\").map(order => <OrderCard key={order.id} order={order} />)\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"preparing\" className=\"space-y-4\">\n          {filterOrders(\"preparing\").length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-preparing-orders\">No orders being prepared</p>\n          ) : (\n            filterOrders(\"preparing\").map(order => <OrderCard key={order.id} order={order} />)\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"ready\" className=\"space-y-4\">\n          {filterOrders(\"ready\").length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-ready-orders\">No orders ready</p>\n          ) : (\n            filterOrders(\"ready\").map(order => <OrderCard key={order.id} order={order} />)\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"past\" className=\"space-y-4\">\n          {filterOrders(\"past\").length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-past-orders\">No past orders</p>\n          ) : (\n            filterOrders(\"past\").map(order => <OrderCard key={order.id} order={order} />)\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":11989},"FoodDelivery/client/src/components/examples/FoodDetailModal.tsx":{"content":"import { FoodDetailModal } from \"../FoodDetailModal\";\nimport { foodItems } from \"@/lib/mockData\";\n\nexport default function FoodDetailModalExample() {\n  return (\n    <FoodDetailModal\n      item={foodItems[0]}\n      isOpen={true}\n      onClose={() => console.log(\"Close modal\")}\n      onAddToCart={(item) => console.log(\"Add to cart:\", item)}\n    />\n  );\n}\n","size_bytes":355},"FoodDelivery/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"FoodDelivery/client/src/components/admin/MenuSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useData, MenuItem as DataMenuItem } from \"@/contexts/DataContext\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface AdminMenuItem {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  subcategory: string;\n  available: boolean;\n  imageUrl?: string;\n}\n\nexport function MenuSection() {\n  const { toast } = useToast();\n  const { menuItems: allMenuItems, addMenuItem, updateMenuItem, deleteMenuItem, getRestaurantMenuItems, restaurants } = useData();\n  const { adminProfile } = useAuth();\n  const [menuItems, setMenuItems] = useState<DataMenuItem[]>([]);\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<DataMenuItem | null>(null);\n  \n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subcategory, setSubcategory] = useState(\"\");\n  const [customCategory, setCustomCategory] = useState(\"\");\n  const [customSubcategory, setCustomSubcategory] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const categories = [\"Indian\", \"Chinese\", \"Italian\", \"Desserts\", \"Beverages\", \"Custom\"];\n  const subcategories: Record<string, string[]> = {\n    \"Indian\": [\"Veg\", \"Non-Veg\"],\n    \"Chinese\": [\"Veg\", \"Non-Veg\"],\n    \"Italian\": [\"Veg\", \"Non-Veg\", \"Pasta\", \"Pizza\"],\n    \"Desserts\": [\"Ice Cream\", \"Cakes\", \"Traditional\"],\n    \"Beverages\": [\"Coffee\", \"Tea\", \"Juice\", \"Soft Drinks\"],\n    \"Custom\": []\n  };\n\n  useEffect(() => {\n    loadMenu();\n  }, [adminProfile, allMenuItems]);\n\n  const loadMenu = () => {\n    if (adminProfile?.restaurantId) {\n      const items = getRestaurantMenuItems(adminProfile.restaurantId);\n      setMenuItems(items);\n    }\n  };\n\n  const getDefaultImage = () => {\n    return \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400\";\n  };\n\n  const handleAdd = () => {\n    if (!name || !price || !category || !adminProfile?.restaurantId) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const finalCategory = category === \"Custom\" ? customCategory : category;\n    const finalSubcategory = category === \"Custom\" ? customSubcategory : subcategory;\n\n    const newItem: DataMenuItem = {\n      id: `ADMIN-${Date.now()}`,\n      name,\n      restaurantId: adminProfile.restaurantId,\n      restaurantName: adminProfile.restaurantName,\n      rating: 4.0,\n      price: parseFloat(price),\n      image: imageUrl || getDefaultImage(),\n      category: finalCategory,\n      isVeg: finalSubcategory === \"Veg\",\n      description: `${name} from ${adminProfile.restaurantName}`,\n      available: true,\n      offer: undefined\n    };\n\n    addMenuItem(newItem);\n    resetForm();\n    setIsAddOpen(false);\n    \n    toast({\n      title: \"Item Added\",\n      description: `${name} has been added to the menu`,\n    });\n  };\n\n  const handleEdit = () => {\n    if (!editingItem || !name || !price || !category) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const finalCategory = category === \"Custom\" ? customCategory : category;\n    const finalSubcategory = category === \"Custom\" ? customSubcategory : subcategory;\n\n    updateMenuItem(editingItem.id, {\n      name,\n      price: parseFloat(price),\n      category: finalCategory,\n      isVeg: finalSubcategory === \"Veg\",\n      image: imageUrl || editingItem.image,\n      description: `${name} from ${editingItem.restaurantName}`\n    });\n\n    resetForm();\n    setEditingItem(null);\n    \n    toast({\n      title: \"Item Updated\",\n      description: `${name} has been updated`,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    deleteMenuItem(id);\n    \n    toast({\n      title: \"Item Deleted\",\n      description: \"Menu item has been removed\",\n    });\n  };\n\n  const toggleAvailability = (id: string) => {\n    const item = menuItems.find(i => i.id === id);\n    if (item) {\n      updateMenuItem(id, { available: !item.available });\n    }\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setPrice(\"\");\n    setCategory(\"\");\n    setSubcategory(\"\");\n    setCustomCategory(\"\");\n    setCustomSubcategory(\"\");\n    setImageUrl(\"\");\n  };\n\n  const openEdit = (item: DataMenuItem) => {\n    setEditingItem(item);\n    setName(item.name);\n    setPrice(item.price.toString());\n    setCategory(categories.includes(item.category) ? item.category : \"Custom\");\n    setSubcategory(item.isVeg ? \"Veg\" : \"Non-Veg\");\n    setImageUrl(item.image || \"\");\n    if (!categories.includes(item.category)) {\n      setCustomCategory(item.category);\n      setCustomSubcategory(item.isVeg ? \"Veg\" : \"Non-Veg\");\n    }\n  };\n\n  const groupedItems = menuItems.reduce((acc, item) => {\n    const subcategory = item.isVeg ? \"Veg\" : \"Non-Veg\";\n    const key = `${item.category}-${subcategory}`;\n    if (!acc[key]) {\n      acc[key] = { category: item.category, subcategory, items: [] };\n    }\n    acc[key].items.push(item);\n    return acc;\n  }, {} as Record<string, { category: string; subcategory: string; items: DataMenuItem[] }>);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-menu-title\">Menu Management</h1>\n        <Dialog open={isAddOpen} onOpenChange={setIsAddOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm} data-testid=\"button-add-menu-item\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Item\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-add-item\">\n            <DialogHeader>\n              <DialogTitle>Add Menu Item</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"item-name\">Item Name</Label>\n                <Input\n                  id=\"item-name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  data-testid=\"input-item-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"item-price\">Price (₹)</Label>\n                <Input\n                  id=\"item-price\"\n                  type=\"number\"\n                  value={price}\n                  onChange={(e) => setPrice(e.target.value)}\n                  data-testid=\"input-item-price\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"item-category\">Category</Label>\n                <Select value={category} onValueChange={setCategory}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map(cat => (\n                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              {category === \"Custom\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"custom-category\">Custom Category Name</Label>\n                  <Input\n                    id=\"custom-category\"\n                    value={customCategory}\n                    onChange={(e) => setCustomCategory(e.target.value)}\n                    data-testid=\"input-custom-category\"\n                  />\n                </div>\n              )}\n              {category && category !== \"Custom\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"item-subcategory\">Subcategory</Label>\n                  <Select value={subcategory} onValueChange={setSubcategory}>\n                    <SelectTrigger data-testid=\"select-subcategory\">\n                      <SelectValue placeholder=\"Select subcategory\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {subcategories[category]?.map(sub => (\n                        <SelectItem key={sub} value={sub}>{sub}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              {category === \"Custom\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"custom-subcategory\">Custom Subcategory (Optional)</Label>\n                  <Input\n                    id=\"custom-subcategory\"\n                    value={customSubcategory}\n                    onChange={(e) => setCustomSubcategory(e.target.value)}\n                    data-testid=\"input-custom-subcategory\"\n                  />\n                </div>\n              )}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"item-image\">Image URL (Optional)</Label>\n                <Input\n                  id=\"item-image\"\n                  value={imageUrl}\n                  onChange={(e) => setImageUrl(e.target.value)}\n                  placeholder=\"https://example.com/image.jpg\"\n                  data-testid=\"input-item-image\"\n                />\n              </div>\n              <Button onClick={handleAdd} className=\"w-full\" data-testid=\"button-submit-add\">\n                Add Item\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Dialog open={editingItem !== null} onOpenChange={(open) => !open && setEditingItem(null)}>\n        <DialogContent data-testid=\"dialog-edit-item\">\n          <DialogHeader>\n            <DialogTitle>Edit Menu Item</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-item-name\">Item Name</Label>\n              <Input\n                id=\"edit-item-name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                data-testid=\"input-edit-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-item-price\">Price (₹)</Label>\n              <Input\n                id=\"edit-item-price\"\n                type=\"number\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n                data-testid=\"input-edit-price\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-item-category\">Category</Label>\n              <Select value={category} onValueChange={setCategory}>\n                <SelectTrigger data-testid=\"select-edit-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map(cat => (\n                    <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-item-image\">Image URL (Optional)</Label>\n              <Input\n                id=\"edit-item-image\"\n                value={imageUrl}\n                onChange={(e) => setImageUrl(e.target.value)}\n                placeholder=\"https://example.com/image.jpg\"\n                data-testid=\"input-edit-image\"\n              />\n            </div>\n            <Button onClick={handleEdit} className=\"w-full\" data-testid=\"button-submit-edit\">\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <div className=\"space-y-6\">\n        {Object.values(groupedItems).map((group, idx) => (\n          <Card key={idx} data-testid={`card-category-${group.category}`}>\n            <CardHeader>\n              <CardTitle>\n                {group.category} {group.subcategory && `- ${group.subcategory}`}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {group.items.map(item => (\n                  <div key={item.id} className=\"flex items-center justify-between p-2 border rounded-md\" data-testid={`item-${item.id}`}>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\" data-testid={`text-item-name-${item.id}`}>{item.name}</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-item-price-${item.id}`}>₹{item.price}</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={item.available ? \"default\" : \"secondary\"} data-testid={`badge-availability-${item.id}`}>\n                        {item.available ? \"Available\" : \"Out of Stock\"}\n                      </Badge>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => toggleAvailability(item.id)} data-testid={`button-toggle-${item.id}`}>\n                        {item.available ? \"Mark Unavailable\" : \"Mark Available\"}\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => openEdit(item)} data-testid={`button-edit-${item.id}`}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDelete(item.id)} data-testid={`button-delete-${item.id}`}>\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        \n        {menuItems.length === 0 && (\n          <p className=\"text-center text-muted-foreground py-12\" data-testid=\"text-no-items\">\n            No menu items yet. Click \"Add Item\" to get started.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14610},"FoodDelivery/client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useData } from \"@/contexts/DataContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AuthModal({ isOpen, onClose }: AuthModalProps) {\n  const { login, register } = useAuth();\n  const { addRestaurant } = useData();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSignInPassword] = useState(\"\");\n  const [signUpUsername, setSignUpUsername] = useState(\"\");\n  const [signUpName, setSignUpName] = useState(\"\");\n  const [signUpEmail, setSignUpEmail] = useState(\"\");\n  const [signUpPhone, setSignUpPhone] = useState(\"\");\n  const [signUpAddress, setSignUpAddress] = useState(\"\");\n  const [signUpPassword, setSignUpPassword] = useState(\"\");\n  const [userType, setUserType] = useState<\"customer\" | \"admin\">(\"customer\");\n  const [restaurantName, setRestaurantName] = useState(\"\");\n  const [restaurantLocation, setRestaurantLocation] = useState(\"\");\n\n  const handleSignIn = () => {\n    if (!signInEmail || !signInPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const success = login(signInEmail, signInPassword);\n    \n    if (success) {\n      const users = JSON.parse(localStorage.getItem('foodhub_users') || '[]');\n      const user = users.find((u: any) => u.email === signInEmail);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully signed in.\",\n      });\n      setSignInEmail(\"\");\n      setSignInPassword(\"\");\n      onClose();\n      \n      if (user?.userType === 'admin') {\n        setLocation('/admin');\n      }\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSignUp = () => {\n    if (!signUpUsername || !signUpName || !signUpEmail || !signUpPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (userType === 'admin' && !restaurantName) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter restaurant name for admin account\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const success = register({\n      username: signUpUsername,\n      name: signUpName,\n      email: signUpEmail,\n      phone: signUpPhone || \"\",\n      address: signUpAddress || \"\",\n      password: signUpPassword,\n      userType: userType,\n      restaurantName: userType === 'admin' ? restaurantName : undefined,\n      restaurantLocation: userType === 'admin' ? (restaurantLocation || \"Not Set\") : undefined,\n    }, userType === 'admin' ? addRestaurant : undefined);\n    \n    if (success) {\n      const isAdmin = userType === 'admin';\n      \n      toast({\n        title: \"Account Created!\",\n        description: isAdmin ? \"Welcome to FoodHub Admin Panel!\" : \"Welcome to FoodHub!\",\n      });\n      setSignUpUsername(\"\");\n      setSignUpName(\"\");\n      setSignUpEmail(\"\");\n      setSignUpPhone(\"\");\n      setSignUpAddress(\"\");\n      setSignUpPassword(\"\");\n      setUserType(\"customer\");\n      setRestaurantName(\"\");\n      setRestaurantLocation(\"\");\n      onClose();\n      \n      if (isAdmin) {\n        setLocation('/admin');\n      }\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Email or username already exists\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n          data-testid=\"auth-backdrop\"\n        />\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-3xl shadow-2xl w-full max-w-md max-h-[90vh] flex flex-col\"\n          data-testid=\"auth-modal\"\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4 z-10\"\n            data-testid=\"button-close-auth\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n\n          <div className=\"p-6 pt-12 overflow-y-auto\">\n            <Tabs defaultValue=\"signin\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Login</TabsTrigger>\n                <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Register</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"signin\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-email\">Email</Label>\n                  <Input\n                    id=\"signin-email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={signInEmail}\n                    onChange={(e) => setSignInEmail(e.target.value)}\n                    data-testid=\"input-signin-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-password\">Password</Label>\n                  <Input\n                    id=\"signin-password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={signInPassword}\n                    onChange={(e) => setSignInPassword(e.target.value)}\n                    data-testid=\"input-signin-password\"\n                  />\n                </div>\n                <Button className=\"w-full\" onClick={handleSignIn} data-testid=\"button-signin-submit\">\n                  Login\n                </Button>\n              </TabsContent>\n\n              <TabsContent value=\"signup\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-username\">Username</Label>\n                  <Input\n                    id=\"signup-username\"\n                    placeholder=\"Choose a username\"\n                    value={signUpUsername}\n                    onChange={(e) => setSignUpUsername(e.target.value)}\n                    data-testid=\"input-signup-username\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-name\">Full Name</Label>\n                  <Input\n                    id=\"signup-name\"\n                    placeholder=\"Enter your name\"\n                    value={signUpName}\n                    onChange={(e) => setSignUpName(e.target.value)}\n                    data-testid=\"input-signup-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={signUpEmail}\n                    onChange={(e) => setSignUpEmail(e.target.value)}\n                    data-testid=\"input-signup-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-phone\">Phone (Optional)</Label>\n                  <Input\n                    id=\"signup-phone\"\n                    type=\"tel\"\n                    placeholder=\"Enter your phone number\"\n                    value={signUpPhone}\n                    onChange={(e) => setSignUpPhone(e.target.value)}\n                    data-testid=\"input-signup-phone\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-address\">Address (Optional)</Label>\n                  <Input\n                    id=\"signup-address\"\n                    placeholder=\"Enter your address\"\n                    value={signUpAddress}\n                    onChange={(e) => setSignUpAddress(e.target.value)}\n                    data-testid=\"input-signup-address\"\n                  />\n                </div>\n                <div className=\"space-y-3\">\n                  <Label>User Type</Label>\n                  <RadioGroup value={userType} onValueChange={(val) => setUserType(val as \"customer\" | \"admin\")} data-testid=\"radio-user-type\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"customer\" id=\"customer\" data-testid=\"radio-customer\" />\n                      <Label htmlFor=\"customer\" className=\"font-normal cursor-pointer\">Customer</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"admin\" id=\"admin\" data-testid=\"radio-admin\" />\n                      <Label htmlFor=\"admin\" className=\"font-normal cursor-pointer\">Admin (Delivery Partner)</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n                {userType === 'admin' && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"restaurant-name\">Restaurant Name *</Label>\n                      <Input\n                        id=\"restaurant-name\"\n                        placeholder=\"Enter restaurant name\"\n                        value={restaurantName}\n                        onChange={(e) => setRestaurantName(e.target.value)}\n                        data-testid=\"input-restaurant-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"restaurant-location\">Restaurant Location (Optional)</Label>\n                      <Input\n                        id=\"restaurant-location\"\n                        placeholder=\"Enter restaurant location\"\n                        value={restaurantLocation}\n                        onChange={(e) => setRestaurantLocation(e.target.value)}\n                        data-testid=\"input-restaurant-location\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">You can update this with a map selector later in your admin panel</p>\n                    </div>\n                  </>\n                )}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    value={signUpPassword}\n                    onChange={(e) => setSignUpPassword(e.target.value)}\n                    data-testid=\"input-signup-password\"\n                  />\n                </div>\n                <Button className=\"w-full\" onClick={handleSignUp} data-testid=\"button-signup-submit\">\n                  Register\n                </Button>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n}\n","size_bytes":11929},"FoodDelivery/client/src/components/admin/AdminSidebar.tsx":{"content":"import { Package, Menu, Tag, BarChart3, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface AdminSidebarProps {\n  activeSection: \"orders\" | \"menu\" | \"offers\" | \"metrics\" | \"help\";\n  onSectionChange: (section: \"orders\" | \"menu\" | \"offers\" | \"metrics\" | \"help\") => void;\n}\n\nexport function AdminSidebar({ activeSection, onSectionChange }: AdminSidebarProps) {\n  const menuItems = [\n    { id: \"orders\" as const, label: \"Orders\", icon: Package },\n    { id: \"menu\" as const, label: \"Menu\", icon: Menu },\n    { id: \"offers\" as const, label: \"Offers\", icon: Tag },\n    { id: \"metrics\" as const, label: \"Metrics\", icon: BarChart3 },\n    { id: \"help\" as const, label: \"Help\", icon: HelpCircle },\n  ];\n\n  return (\n    <div className=\"w-64 border-r bg-card flex flex-col\">\n      <div className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-primary\" data-testid=\"text-admin-title\">Admin Panel</h2>\n      </div>\n      \n      <Separator />\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {menuItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = activeSection === item.id;\n          \n          return (\n            <Button\n              key={item.id}\n              variant={isActive ? \"default\" : \"ghost\"}\n              className=\"w-full justify-start\"\n              onClick={() => onSectionChange(item.id)}\n              data-testid={`button-nav-${item.id}`}\n            >\n              <Icon className=\"mr-2 h-4 w-4\" />\n              {item.label}\n            </Button>\n          );\n        })}\n      </nav>\n    </div>\n  );\n}\n","size_bytes":1660},"FoodDelivery/client/src/components/CheckoutModal.tsx":{"content":"import { CheckCircle2, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface CheckoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  total: number;\n}\n\nexport function CheckoutModal({ isOpen, onClose }: CheckoutModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n          data-testid=\"checkout-backdrop\"\n        />\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.9, y: 20 }}\n          className=\"relative bg-background rounded-3xl shadow-2xl w-full max-w-md p-8 text-center\"\n          data-testid=\"checkout-modal\"\n        >\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"absolute right-4 top-4 z-10\"\n            onClick={onClose}\n            data-testid=\"button-close-checkout\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n            className=\"mb-6\"\n          >\n            <div className=\"w-24 h-24 bg-green-100 dark:bg-green-950 rounded-full flex items-center justify-center mx-auto\">\n              <CheckCircle2 className=\"w-12 h-12 text-green-600 dark:text-green-400\" />\n            </div>\n          </motion.div>\n\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"checkout-title\">Order Successful!</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Your order has been placed successfully. You'll receive a confirmation shortly.\n          </p>\n\n          <div className=\"space-y-3\">\n            <Button className=\"w-full\" onClick={onClose} data-testid=\"button-continue-shopping\">\n              Continue Shopping\n            </Button>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-track-order\">\n              Track Order\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n}\n","size_bytes":2465},"FoodDelivery/client/src/components/CartDropdown.tsx":{"content":"import { X, Minus, Plus, ShoppingBag, Tag } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n}\n\ninterface CartDropdownProps {\n  isOpen: boolean;\n  onClose: () => void;\n  items: CartItem[];\n  total: number;\n  onRemoveItem: (id: string) => void;\n  onUpdateQuantity: (id: string, quantity: number) => void;\n  appliedOffer?: { id: string; title: string; description: string; discountValue: number } | null;\n}\n\nexport function CartDropdown({ isOpen, onClose, items, total, onRemoveItem, onUpdateQuantity, appliedOffer }: CartDropdownProps) {\n  const [, setLocation] = useLocation();\n  \n  const TAX_RATE = 0.05;\n  const DELIVERY_FEE = 40;\n\n  const subtotal = total;\n  const tax = subtotal * TAX_RATE;\n  const deliveryFee = appliedOffer?.title.includes(\"Free Delivery\") ? 0 : DELIVERY_FEE;\n  \n  const offerDiscount = appliedOffer?.discountValue \n    ? Math.min((subtotal * appliedOffer.discountValue) / 100, 100)\n    : 0;\n  \n  const grandTotal = Math.max(subtotal + tax + deliveryFee - offerDiscount, 0);\n\n  const handleViewCart = () => {\n    onClose();\n    setLocation(\"/cart\");\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className=\"fixed inset-0 bg-black/50 z-40\" onClick={onClose} data-testid=\"cart-backdrop\" />\n      <AnimatePresence>\n        <motion.div\n          initial={{ x: \"100%\" }}\n          animate={{ x: 0 }}\n          exit={{ x: \"100%\" }}\n          transition={{ type: \"spring\", damping: 25, stiffness: 200 }}\n          className=\"fixed right-0 top-0 h-full w-full sm:w-96 bg-background shadow-2xl z-50 flex flex-col\"\n          data-testid=\"cart-dropdown\"\n        >\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h3 className=\"font-semibold text-lg\">Your Cart</h3>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-cart\">\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          {items.length === 0 ? (\n            <div className=\"flex-1 flex flex-col items-center justify-center p-8 text-center\">\n              <ShoppingBag className=\"h-20 w-20 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">Your cart is empty</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Add items to get started</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n                {items.map((item) => (\n                  <div key={item.id} className=\"flex gap-3 p-3 bg-card rounded-lg\" data-testid={`cart-item-${item.id}`}>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm mb-1\">{item.name}</h4>\n                      <p className=\"text-sm font-semibold\">₹{item.price}</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"outline\"\n                        className=\"h-7 w-7\"\n                        onClick={() => onUpdateQuantity(item.id, Math.max(0, item.quantity - 1))}\n                        data-testid={`button-decrease-${item.id}`}\n                      >\n                        <Minus className=\"h-3 w-3\" />\n                      </Button>\n                      <span className=\"w-8 text-center font-medium\" data-testid={`quantity-${item.id}`}>{item.quantity}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"outline\"\n                        className=\"h-7 w-7\"\n                        onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}\n                        data-testid={`button-increase-${item.id}`}\n                      >\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      className=\"h-7 w-7\"\n                      onClick={() => onRemoveItem(item.id)}\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"border-t p-4 space-y-3\">\n                {appliedOffer && (\n                  <div className=\"flex items-center gap-2 p-2 bg-accent/10 rounded-lg\" data-testid=\"applied-offer\">\n                    <Tag className=\"h-4 w-4 text-primary\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{appliedOffer.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">{appliedOffer.description}</p>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"space-y-1\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Subtotal</span>\n                    <span data-testid=\"cart-subtotal\">₹{subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Tax (5%)</span>\n                    <span data-testid=\"cart-tax\">₹{tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Delivery Fee</span>\n                    <span data-testid=\"cart-delivery-fee\">\n                      {deliveryFee === 0 ? <Badge variant=\"outline\" className=\"text-xs\">FREE</Badge> : `₹${deliveryFee}`}\n                    </span>\n                  </div>\n                  {offerDiscount > 0 && (\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>Offer Discount</span>\n                      <span data-testid=\"cart-offer-discount\">-₹{offerDiscount.toFixed(2)}</span>\n                    </div>\n                  )}\n                </div>\n\n                <Separator />\n\n                <div className=\"flex justify-between items-center font-semibold text-lg\">\n                  <span>Total</span>\n                  <span data-testid=\"cart-total\">₹{grandTotal.toFixed(2)}</span>\n                </div>\n                <Button \n                  className=\"w-full\" \n                  size=\"lg\" \n                  onClick={handleViewCart}\n                  data-testid=\"button-view-cart\"\n                >\n                  View Cart\n                </Button>\n              </div>\n            </>\n          )}\n        </motion.div>\n      </AnimatePresence>\n    </>\n  );\n}\n","size_bytes":7054},"FoodDelivery/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"FoodDelivery/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"FoodDelivery/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"FoodDelivery/client/src/components/SearchBar.tsx":{"content":"import { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { searchSuggestions } from \"@/lib/mockData\";\n\ninterface SearchBarProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n}\n\nexport function SearchBar({ searchQuery, onSearchChange }: SearchBarProps) {\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const filteredSuggestions = searchSuggestions.filter((item) =>\n    item.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"relative w-full\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          type=\"search\"\n          placeholder=\"Search for food or restaurant...\"\n          value={searchQuery}\n          onChange={(e) => onSearchChange(e.target.value)}\n          onFocus={() => setShowSuggestions(true)}\n          onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n          className=\"pl-10 rounded-full\"\n          data-testid=\"input-search\"\n        />\n      </div>\n\n      {showSuggestions && searchQuery && filteredSuggestions.length > 0 && (\n        <div className=\"absolute top-full mt-2 w-full bg-popover border border-popover-border rounded-xl shadow-lg z-50 overflow-hidden\" data-testid=\"search-suggestions\">\n          {filteredSuggestions.map((suggestion, index) => (\n            <button\n              key={index}\n              className=\"w-full text-left px-4 py-3 hover-elevate active-elevate-2 text-sm\"\n              onClick={() => {\n                onSearchChange(suggestion);\n              }}\n              data-testid={`suggestion-${index}`}\n            >\n              <Search className=\"inline h-3 w-3 mr-2 text-muted-foreground\" />\n              {suggestion}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1925},"FoodDelivery/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"FoodDelivery/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: false,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1043},"FoodDelivery/client/src/components/CategorySection.tsx":{"content":"import { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { FoodCard } from \"./FoodCard\";\nimport { useRef, useState } from \"react\";\nimport type { FoodItem } from \"@/lib/mockData\";\n\ninterface CategorySectionProps {\n  title: string;\n  items: FoodItem[];\n  onAddToCart: (item: FoodItem) => void;\n  onItemClick: (item: FoodItem) => void;\n}\n\nexport function CategorySection({ title, items, onAddToCart, onItemClick }: CategorySectionProps) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [showLeftArrow, setShowLeftArrow] = useState(false);\n  const [showRightArrow, setShowRightArrow] = useState(true);\n\n  const scroll = (direction: \"left\" | \"right\") => {\n    if (scrollRef.current) {\n      const scrollAmount = 300;\n      const newScrollLeft =\n        direction === \"left\"\n          ? scrollRef.current.scrollLeft - scrollAmount\n          : scrollRef.current.scrollLeft + scrollAmount;\n      \n      scrollRef.current.scrollTo({ left: newScrollLeft, behavior: \"smooth\" });\n    }\n  };\n\n  const handleScroll = () => {\n    if (scrollRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = scrollRef.current;\n      setShowLeftArrow(scrollLeft > 0);\n      setShowRightArrow(scrollLeft < scrollWidth - clientWidth - 10);\n    }\n  };\n\n  return (\n    <div className=\"py-8\" data-testid={`category-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n        <h2 className=\"text-2xl md:text-3xl font-bold mb-6\">{title}</h2>\n        \n        <div className=\"relative group\">\n          {showLeftArrow && (\n            <Button\n              size=\"icon\"\n              variant=\"secondary\"\n              className=\"absolute left-2 top-1/2 -translate-y-1/2 z-10 opacity-0 group-hover:opacity-100 transition-opacity shadow-lg\"\n              onClick={() => scroll(\"left\")}\n              data-testid=\"scroll-left\"\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n          )}\n\n          <div\n            ref={scrollRef}\n            onScroll={handleScroll}\n            className=\"flex gap-4 overflow-x-auto scrollbar-hide pb-2\"\n            style={{ scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}\n          >\n            {items.map((item) => (\n              <FoodCard\n                key={item.id}\n                item={item}\n                onAddToCart={onAddToCart}\n                onClick={onItemClick}\n              />\n            ))}\n          </div>\n\n          {showRightArrow && (\n            <Button\n              size=\"icon\"\n              variant=\"secondary\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10 opacity-0 group-hover:opacity-100 transition-opacity shadow-lg\"\n              onClick={() => scroll(\"right\")}\n              data-testid=\"scroll-right\"\n            >\n              <ChevronRight className=\"h-5 w-5\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2989},"FoodDelivery/client/src/lib/mockData.ts":{"content":"// TODO: remove mock functionality - This file contains static data for the prototype\n\nimport chineseNoodles1 from \"@assets/stock_images/delicious_chinese_no_211115cc.jpg\";\nimport chineseNoodles2 from \"@assets/stock_images/delicious_chinese_no_a3677ed5.jpg\";\nimport chineseNoodles3 from \"@assets/stock_images/delicious_chinese_no_da77bf60.jpg\";\nimport indianCurry1 from \"@assets/stock_images/indian_curry_butter__568a69fb.jpg\";\nimport indianCurry2 from \"@assets/stock_images/indian_curry_butter__e4b04cd5.jpg\";\nimport indianCurry3 from \"@assets/stock_images/indian_curry_butter__30463c21.jpg\";\nimport pizza1 from \"@assets/stock_images/pizza_margherita_pep_0ae576a4.jpg\";\nimport pizza2 from \"@assets/stock_images/pizza_margherita_pep_a7aaee77.jpg\";\nimport pizza3 from \"@assets/stock_images/pizza_margherita_pep_a06c681f.jpg\";\nimport iceCream1 from \"@assets/stock_images/ice_cream_sundae_des_40597829.jpg\";\nimport iceCream2 from \"@assets/stock_images/ice_cream_sundae_des_4560c4ef.jpg\";\nimport iceCream3 from \"@assets/stock_images/ice_cream_sundae_des_28cf0bda.jpg\";\nimport burger1 from \"@assets/stock_images/burger_fries_fast_fo_a73a6c94.jpg\";\nimport burger2 from \"@assets/stock_images/burger_fries_fast_fo_675c48df.jpg\";\nimport burger3 from \"@assets/stock_images/burger_fries_fast_fo_8507c30e.jpg\";\nimport salad1 from \"@assets/stock_images/vegetarian_salad_hea_aa0ada6b.jpg\";\nimport salad2 from \"@assets/stock_images/vegetarian_salad_hea_e00145e2.jpg\";\nimport gourmet1 from \"@assets/stock_images/gourmet_fine_dining__b271a445.jpg\";\nimport gourmet2 from \"@assets/stock_images/gourmet_fine_dining__a87a57e6.jpg\";\n\nexport interface FoodItem {\n  id: string;\n  name: string;\n  restaurant: string;\n  rating: number;\n  price: number;\n  image: string;\n  category: string;\n  isVeg: boolean;\n  offer?: string;\n  description: string;\n}\n\nexport const foodItems: FoodItem[] = [\n  // Chinese\n  { id: \"1\", name: \"Hakka Noodles\", restaurant: \"Wok Express\", rating: 4.5, price: 180, image: chineseNoodles1, category: \"Chinese\", isVeg: true, offer: \"20% OFF\", description: \"Delicious stir-fried noodles with fresh vegetables and authentic Chinese spices\" },\n  { id: \"2\", name: \"Chilli Chicken\", restaurant: \"Dragon Wok\", rating: 4.3, price: 250, image: chineseNoodles2, category: \"Chinese\", isVeg: false, description: \"Spicy chicken tossed in Indo-Chinese sauce with bell peppers\" },\n  { id: \"3\", name: \"Veg Manchurian\", restaurant: \"China Town\", rating: 4.2, price: 160, image: chineseNoodles3, category: \"Chinese\", isVeg: true, offer: \"15% OFF\", description: \"Crispy vegetable balls in tangy Manchurian gravy\" },\n  \n  // Indian\n  { id: \"4\", name: \"Butter Chicken\", restaurant: \"Tandoor House\", rating: 4.7, price: 320, image: indianCurry1, category: \"Indian\", isVeg: false, description: \"Creamy tomato-based curry with tender chicken pieces\" },\n  { id: \"5\", name: \"Paneer Tikka Masala\", restaurant: \"Spice Garden\", rating: 4.6, price: 280, image: indianCurry2, category: \"Indian\", isVeg: true, offer: \"25% OFF\", description: \"Grilled cottage cheese in rich tomato gravy\" },\n  { id: \"6\", name: \"Dal Makhani\", restaurant: \"Punjab Grill\", rating: 4.5, price: 240, image: indianCurry3, category: \"Indian\", isVeg: true, description: \"Slow-cooked black lentils with butter and cream\" },\n  \n  // Pizza\n  { id: \"7\", name: \"Margherita Pizza\", restaurant: \"Pizza Hut\", rating: 4.4, price: 299, image: pizza1, category: \"Pizza\", isVeg: true, offer: \"Buy 1 Get 1\", description: \"Classic pizza with fresh mozzarella and basil\" },\n  { id: \"8\", name: \"Pepperoni Pizza\", restaurant: \"Domino's\", rating: 4.6, price: 399, image: pizza2, category: \"Pizza\", isVeg: false, description: \"Loaded with pepperoni and cheese\" },\n  { id: \"9\", name: \"Veggie Supreme\", restaurant: \"Pizza Corner\", rating: 4.3, price: 349, image: pizza3, category: \"Pizza\", isVeg: true, description: \"Loaded with fresh vegetables and herbs\" },\n  \n  // Ice Cream\n  { id: \"10\", name: \"Chocolate Sundae\", restaurant: \"Baskin Robbins\", rating: 4.8, price: 180, image: iceCream1, category: \"Ice Cream\", isVeg: true, description: \"Rich chocolate ice cream with hot fudge and nuts\" },\n  { id: \"11\", name: \"Strawberry Delight\", restaurant: \"Gelato Cafe\", rating: 4.7, price: 150, image: iceCream2, category: \"Ice Cream\", isVeg: true, offer: \"30% OFF\", description: \"Fresh strawberry ice cream with berry toppings\" },\n  { id: \"12\", name: \"Cookie Crumble\", restaurant: \"Sweet Treats\", rating: 4.5, price: 200, image: iceCream3, category: \"Ice Cream\", isVeg: true, description: \"Vanilla ice cream with cookie chunks\" },\n  \n  // Fast Food\n  { id: \"13\", name: \"Classic Burger\", restaurant: \"McDonald's\", rating: 4.4, price: 120, image: burger1, category: \"Fast Food\", isVeg: false, description: \"Juicy beef patty with fresh lettuce and cheese\" },\n  { id: \"14\", name: \"Chicken Burger\", restaurant: \"KFC\", rating: 4.5, price: 150, image: burger2, category: \"Fast Food\", isVeg: false, offer: \"20% OFF\", description: \"Crispy fried chicken with special sauce\" },\n  { id: \"15\", name: \"Veggie Burger\", restaurant: \"Subway\", rating: 4.2, price: 110, image: burger3, category: \"Fast Food\", isVeg: true, description: \"Fresh vegetables with cheese and mayo\" },\n  \n  // Veg Restaurants\n  { id: \"16\", name: \"Greek Salad\", restaurant: \"Green Bowl\", rating: 4.6, price: 220, image: salad1, category: \"Veg\", isVeg: true, description: \"Fresh greens with feta cheese and olives\" },\n  { id: \"17\", name: \"Caesar Salad\", restaurant: \"Veggie Delight\", rating: 4.4, price: 200, image: salad2, category: \"Veg\", isVeg: true, offer: \"15% OFF\", description: \"Crisp romaine with parmesan and croutons\" },\n  \n  // Premium\n  { id: \"18\", name: \"Gourmet Steak\", restaurant: \"The Taj\", rating: 4.9, price: 1200, image: gourmet1, category: \"Premium\", isVeg: false, description: \"Premium cut steak with truffle sauce\" },\n  { id: \"19\", name: \"Fine Dining Platter\", restaurant: \"Oberoi Grand\", rating: 4.8, price: 1500, image: gourmet2, category: \"Premium\", isVeg: false, offer: \"10% OFF\", description: \"Exquisite multi-course fine dining experience\" },\n];\n\nexport const categories = [\n  { id: \"chinese\", name: \"Chinese\", icon: \"🍜\" },\n  { id: \"indian\", name: \"Indian\", icon: \"🍛\" },\n  { id: \"pizza\", name: \"Pizza & Fast Food\", icon: \"🍕\" },\n  { id: \"icecream\", name: \"Ice Creams\", icon: \"🍦\" },\n  { id: \"brands\", name: \"Popular Brands\", icon: \"🍔\" },\n  { id: \"veg\", name: \"Only Veg\", icon: \"🌱\" },\n  { id: \"premium\", name: \"Premium Dining\", icon: \"⭐\" },\n];\n\nexport const offers = [\n  { id: \"1\", title: \"50% OFF up to ₹100\", description: \"Use code FOOD50\", image: pizza1 },\n  { id: \"2\", title: \"Free Delivery\", description: \"On orders above ₹200\", image: burger1 },\n  { id: \"3\", title: \"Buy 1 Get 1 Free\", description: \"On selected items\", image: iceCream1 },\n  { id: \"4\", title: \"30% OFF\", description: \"First order discount\", image: indianCurry1 },\n];\n\nexport const searchSuggestions = [\n  \"Pizza\", \"Burger\", \"Biryani\", \"Chinese\", \"Ice Cream\", \n  \"McDonald's\", \"KFC\", \"Domino's\", \"Butter Chicken\", \"Noodles\"\n];\n\nexport const savedAddresses = [\n  { id: \"1\", label: \"Home\", address: \"123 Main Street, Downtown\" },\n  { id: \"2\", label: \"Work\", address: \"456 Business Park, Tech Hub\" },\n];\n","size_bytes":7192},"replit.md":{"content":"# FoodHub - Food Delivery Application\n\n## Overview\n\nFoodHub is a modern food delivery web application built with React and TypeScript. The application enables users to browse restaurants, search for food items, manage shopping carts, track orders, and complete payments. It includes a comprehensive admin panel for restaurant partners to manage their menus, orders, and offers.\n\nThe application is a **frontend-only prototype** using localStorage for all data persistence. There is no backend server or database - all data is stored in the browser's localStorage as JSON.\n\n## Recent Changes\n\n**October 16, 2025** - Converted to frontend-only Vite application:\n- ✅ Removed Express backend server and all server-side code\n- ✅ Removed database configuration (Drizzle ORM, Neon PostgreSQL)\n- ✅ Updated package.json to use Vite directly (no backend dependencies)\n- ✅ Cleaned up configuration files (vite.config.ts, tsconfig.json)\n- ✅ Updated deployment to use `vite preview` for production\n- ✅ Verified build process works correctly\n- ✅ Application uses localStorage/JSON for all data storage\n\n**Previous Setup** - Successfully imported and configured for Replit:\n- ✅ Installed Node.js 20 and all project dependencies\n- ✅ Updated vite.config.ts to allow all hosts for Replit proxy\n- ✅ Configured workflow to run development server on port 5000\n- ✅ Verified frontend working correctly with screenshot\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling:**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server (no backend)\n- **Wouter** for lightweight client-side routing (regex-based route matching)\n- **TanStack Query** for data fetching and state management\n- **Framer Motion** for animations and transitions\n\n**UI Component System:**\n- **shadcn/ui** components built on Radix UI primitives\n- **Tailwind CSS** for styling with custom design tokens\n- Design system based on food delivery platforms (Swiggy, Zomato, Uber Eats)\n- Responsive breakpoints: sm, md, lg, xl\n- Dark/light theme support with CSS variables\n\n**State Management:**\n- **Context API** for global state:\n  - `AuthContext`: User authentication, profile management, order history\n  - `DataContext`: Restaurant and menu data with localStorage persistence\n- Local component state with React hooks\n- Cross-tab synchronization via storage events\n\n**Data Persistence:**\n- **localStorage** as the primary data store (JSON format)\n- Keys: `foodhub_users`, `foodhub_restaurants`, `foodhub_menu_items`, `foodhub_admin_offers`\n- Initialization flag pattern (`isInitialized`) to prevent race conditions\n- Real-time updates across browser tabs via storage event listeners\n\n**Key Features:**\n- Dynamic search and filtering (veg/non-veg, price, rating, offers)\n- Shopping cart with tax calculation and coupon support\n- Order tracking with status updates\n- Live location selection with Leaflet maps\n- Admin dashboard for restaurant management\n\n### Routing Structure\n\n**Client Routes (Wouter):**\n- `/` - Home page (exact match with regex `/^\\/$/`)\n- `/profile` - User profile management\n- `/track-order` - Order tracking\n- `/cart` - Shopping cart\n- `/payment` - Payment processing\n- `/admin` - Admin dashboard (auth-protected, admin-only)\n\n### Design System\n\n**Color Palette:**\n- Primary: Vibrant coral/red (hsl 255 84% 50%) for food branding\n- Secondary: Fresh green (hsl 142 71% 45%) for veg options\n- Accent: Warm orange (hsl 45 93% 58%) for promotions\n- Semantic colors for status (orange=preparing, blue=delivery, green=delivered)\n\n**Typography:**\n- Font families: Inter, Plus Jakarta Sans\n- Responsive text scales (xs to 4xl)\n- Weight variations: 400-700\n\n## External Dependencies\n\n### UI & Styling\n- **@radix-ui/* packages** - Headless UI primitives (accordion, dialog, dropdown, tabs, etc.)\n- **tailwindcss** - Utility-first CSS framework\n- **framer-motion** - Animation library\n- **class-variance-authority** - Component variant management\n- **cmdk** - Command menu component\n\n### Data & Forms\n- **@tanstack/react-query** - Server state management\n- **@hookform/resolvers** - Form validation\n- **zod** - Schema validation\n- **date-fns** - Date manipulation\n\n### Maps & Location\n- **leaflet** - Interactive maps for location selection\n- **@types/leaflet** - TypeScript definitions\n- **react-leaflet** - React bindings for Leaflet\n\n### Build & Development\n- **vite** - Build tool and dev server\n- **@vitejs/plugin-react** - React plugin for Vite\n- **typescript** - Type system\n\n### Replit Integration\n- **@replit/vite-plugin-runtime-error-modal** - Error overlay\n- **@replit/vite-plugin-cartographer** - Development tools (dev only)\n- **@replit/vite-plugin-dev-banner** - Development banner (dev only)\n\n## Development Workflow\n\n**Development Server:**\n```bash\ncd FoodDelivery && npm run dev\n```\n- Runs Vite dev server on port 5000\n- Hot module replacement enabled\n- No backend server required\n\n**Build for Production:**\n```bash\ncd FoodDelivery && npm run build\n```\n- Builds frontend to dist/ directory\n- Optimizes assets and bundles code\n\n**Preview Production Build:**\n```bash\ncd FoodDelivery && npm run preview\n```\n- Serves production build locally\n- Runs on port 5000\n\n## Deployment\n\nThe application is configured for autoscale deployment:\n- Build command: `npm run build`\n- Run command: `npm run preview`\n- Port: 5000\n- Pure frontend application with localStorage persistence\n","size_bytes":5521},"FoodDelivery/client/src/components/examples/LoadingSkeleton.tsx":{"content":"import { LoadingSkeleton } from \"../LoadingSkeleton\";\n\nexport default function LoadingSkeletonExample() {\n  return <LoadingSkeleton />;\n}\n","size_bytes":138},"FoodDelivery/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"FoodDelivery/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"FoodDelivery/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"FoodDelivery/client/src/components/Navbar.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Search, Tag, ShoppingCart, User, Menu, LogOut, UserCircle, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { LocationDropdown } from \"./LocationDropdown\";\nimport { SearchBar } from \"./SearchBar\";\nimport { OffersModal } from \"./OffersModal\";\nimport { AuthModal } from \"./AuthModal\";\nimport { CartDropdown } from \"./CartDropdown\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NavbarProps {\n  cartItems: Array<{ id: string; name: string; price: number; quantity: number }>;\n  onRemoveFromCart: (id: string) => void;\n  onUpdateQuantity: (id: string, quantity: number) => void;\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  onApplyOffer: (offer: { id: string; title: string; description: string; discountValue: number }) => void;\n  appliedOffer: { id: string; title: string; description: string; discountValue: number } | null;\n  onClearCart?: () => void;\n}\n\nexport function Navbar({ cartItems, onRemoveFromCart, onUpdateQuantity, searchQuery, onSearchChange, onApplyOffer, appliedOffer, onClearCart }: NavbarProps) {\n  const { isAuthenticated, user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showLocationDropdown, setShowLocationDropdown] = useState(false);\n  const [showOffersModal, setShowOffersModal] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showCartDropdown, setShowCartDropdown] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState(\"Select Location\");\n\n  const cartItemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const cartTotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n  const handleLogout = () => {\n    logout();\n    if (onClearCart) {\n      onClearCart();\n    }\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <>\n      <nav className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16 md:h-20 gap-4\">\n            <div className=\"flex items-center gap-4 md:gap-6\">\n              <h1 className=\"text-xl md:text-2xl font-bold text-primary\" data-testid=\"logo\">FoodHub</h1>\n              \n              <div className=\"hidden md:block relative\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowLocationDropdown(!showLocationDropdown)}\n                  className=\"gap-2 min-w-[200px] justify-start\"\n                  data-testid=\"button-location\"\n                >\n                  <MapPin className=\"h-4 w-4\" />\n                  <span className=\"truncate\">{selectedLocation}</span>\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"hidden lg:block flex-1 max-w-xl\">\n              <SearchBar searchQuery={searchQuery} onSearchChange={onSearchChange} />\n            </div>\n\n            <div className=\"flex items-center gap-2 md:gap-3\">\n              <ThemeToggle />\n              \n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowOffersModal(true)}\n                className=\"gap-2 hidden sm:flex\"\n                data-testid=\"button-offers\"\n              >\n                <Tag className=\"h-4 w-4\" />\n                <span className=\"hidden md:inline\">Offers</span>\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation(\"/track-order\")}\n                className=\"gap-2 hidden sm:flex\"\n                data-testid=\"button-track-order\"\n              >\n                <Package className=\"h-4 w-4\" />\n                <span className=\"hidden md:inline\">Track Order</span>\n              </Button>\n\n              {!isAuthenticated ? (\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowAuthModal(true)}\n                  className=\"gap-2\"\n                  data-testid=\"button-auth\"\n                >\n                  <User className=\"h-4 w-4\" />\n                  <span className=\"hidden md:inline\">Login</span>\n                </Button>\n              ) : (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"gap-2\" data-testid=\"button-profile\">\n                      <Avatar className=\"h-7 w-7\">\n                        <AvatarImage src={user?.avatar} />\n                        <AvatarFallback className=\"text-xs\">\n                          {user?.name ? getInitials(user.name) : \"U\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"hidden md:inline\">{user?.name}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\" data-testid=\"dropdown-profile\">\n                    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={() => setLocation(\"/profile\")}\n                      className=\"gap-2\"\n                      data-testid=\"menuitem-profile\"\n                    >\n                      <UserCircle className=\"h-4 w-4\" />\n                      Profile\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={handleLogout}\n                      className=\"gap-2 text-destructive focus:text-destructive\"\n                      data-testid=\"menuitem-logout\"\n                    >\n                      <LogOut className=\"h-4 w-4\" />\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              )}\n\n              <div className=\"relative\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowCartDropdown(!showCartDropdown)}\n                  className=\"relative\"\n                  data-testid=\"button-cart\"\n                >\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  {cartItemCount > 0 && (\n                    <span className=\"absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs rounded-full h-5 w-5 flex items-center justify-center\" data-testid=\"cart-count\">\n                      {cartItemCount}\n                    </span>\n                  )}\n                </Button>\n              </div>\n\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-menu\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"lg:hidden pb-3\">\n            <SearchBar searchQuery={searchQuery} onSearchChange={onSearchChange} />\n          </div>\n        </div>\n      </nav>\n\n      <LocationDropdown\n        isOpen={showLocationDropdown}\n        onClose={() => setShowLocationDropdown(false)}\n        onSelectLocation={setSelectedLocation}\n      />\n\n      <OffersModal isOpen={showOffersModal} onClose={() => setShowOffersModal(false)} onApplyOffer={onApplyOffer} />\n\n      <AuthModal isOpen={showAuthModal} onClose={() => setShowAuthModal(false)} />\n\n      <CartDropdown\n        isOpen={showCartDropdown}\n        onClose={() => setShowCartDropdown(false)}\n        items={cartItems}\n        total={cartTotal}\n        onRemoveItem={onRemoveFromCart}\n        onUpdateQuantity={onUpdateQuantity}\n        appliedOffer={appliedOffer}\n      />\n    </>\n  );\n}\n","size_bytes":8406},"FoodDelivery/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"FoodDelivery/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"FoodDelivery/client/src/components/examples/BackToTop.tsx":{"content":"import { BackToTop } from \"../BackToTop\";\n\nexport default function BackToTopExample() {\n  return (\n    <div className=\"h-[200vh] p-8\">\n      <p>Scroll down to see the Back to Top button</p>\n      <BackToTop />\n    </div>\n  );\n}\n","size_bytes":228}},"version":2}